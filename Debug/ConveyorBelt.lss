
ConveyorBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800200  000007fc  00000890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  008002c0  008002c0  00000950  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026c2  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fbf  00000000  00000000  0000319a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f0f  00000000  00000000  00004159  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00005068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000842  00000000  00000000  00005418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000136b  00000000  00000000  00005c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00006fc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c2       	rjmp	.+1448   	; 0x5ae <__vector_1>
   6:	00 00       	nop
   8:	e6 c2       	rjmp	.+1484   	; 0x5d6 <__vector_2>
   a:	00 00       	nop
   c:	2c c3       	rjmp	.+1624   	; 0x666 <__vector_3>
   e:	00 00       	nop
  10:	42 c3       	rjmp	.+1668   	; 0x696 <__vector_4>
  12:	00 00       	nop
  14:	54 c3       	rjmp	.+1704   	; 0x6be <__vector_5>
  16:	00 00       	nop
  18:	6e c3       	rjmp	.+1756   	; 0x6f6 <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	54 c3       	rjmp	.+1704   	; 0x71e <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ef       	ldi	r30, 0xFC	; 252
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3c       	cpi	r26, 0xC0	; 192
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 ec       	ldi	r26, 0xC0	; 192
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 3d       	cpi	r26, 0xD1	; 209
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0f d1       	rcall	.+542    	; 0x33e <main>
 120:	6b c3       	rjmp	.+1750   	; 0x7f8 <_exit>

00000122 <__bad_interrupt>:
 122:	2e c3       	rjmp	.+1628   	; 0x780 <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCDBusyLoop+0xc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCDBusyLoop+0xe>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 132:	47 9a       	sbi	0x08, 7	; 8
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 138:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 13a:	82 95       	swap	r24
 13c:	80 7f       	andi	r24, 0xF0	; 240
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCDBusyLoop+0x1e>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 142:	47 98       	cbi	0x08, 7	; 8
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL
		
		SET_E();
 14c:	47 9a       	sbi	0x08, 7	; 8
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDBusyLoop+0x2c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCDBusyLoop+0x2e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 152:	96 b1       	in	r25, 0x06	; 6
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCDBusyLoop+0x32>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCDBusyLoop+0x34>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 158:	47 98       	cbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
		
	}while(busy);
 162:	88 23       	and	r24, r24
 164:	34 f3       	brlt	.-52     	; 0x132 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
 166:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 168:	87 b1       	in	r24, 0x07	; 7
 16a:	8f 60       	ori	r24, 0x0F	; 15
 16c:	87 b9       	out	0x07, r24	; 7
 16e:	08 95       	ret

00000170 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 170:	28 2f       	mov	r18, r24
 172:	22 95       	swap	r18
 174:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 176:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 178:	61 11       	cpse	r22, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <LCDByte+0x10>
	CLEAR_RS();
 17c:	46 98       	cbi	0x08, 6	; 8
 17e:	01 c0       	rjmp	.+2      	; 0x182 <LCDByte+0x12>
else
	SET_RS();
 180:	46 9a       	sbi	0x08, 6	; 8
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCDByte+0x14>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCDByte+0x16>

_delay_us(0.500);		//tAS


SET_E();
 186:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 188:	98 b1       	in	r25, 0x08	; 8
 18a:	90 7f       	andi	r25, 0xF0	; 240
 18c:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 18e:	98 b9       	out	0x08, r25	; 8
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <LCDByte+0x22>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCDByte+0x28>
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 198:	47 98       	cbi	0x08, 7	; 8
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDByte+0x2c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCDByte+0x32>

_delay_us(1);

//Send the lower nibble
SET_E();
 1a2:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1a4:	98 b1       	in	r25, 0x08	; 8
 1a6:	90 7f       	andi	r25, 0xF0	; 240
 1a8:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDByte+0x3e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCDByte+0x44>
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1b4:	47 98       	cbi	0x08, 7	; 8
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCDByte+0x48>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCDByte+0x4e>

_delay_us(1);			//tEL

LCDBusyLoop();
 1be:	b2 cf       	rjmp	.-156    	; 0x124 <LCDBusyLoop>
 1c0:	08 95       	ret

000001c2 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f e5       	ldi	r24, 0x5F	; 95
 1c8:	9a ee       	ldi	r25, 0xEA	; 234
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <InitLCD+0x8>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <InitLCD+0xe>
 1d0:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1d2:	87 b1       	in	r24, 0x07	; 7
 1d4:	8f 60       	ori	r24, 0x0F	; 15
 1d6:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 1d8:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1da:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1dc:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 1e4:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 1e6:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 1e8:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <InitLCD+0x2a>
 1ec:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 1ee:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1f0:	41 9a       	sbi	0x08, 1	; 8
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <InitLCD+0x32>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <InitLCD+0x38>
	_delay_us(1);
	
	CLEAR_E();
 1fa:	47 98       	cbi	0x08, 7	; 8
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <InitLCD+0x3c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <InitLCD+0x42>
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 204:	8f df       	rcall	.-226    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	8c 2f       	mov	r24, r28
 20a:	8c 60       	ori	r24, 0x0C	; 12
 20c:	b1 df       	rcall	.-158    	; 0x170 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	ae df       	rcall	.-164    	; 0x170 <LCDByte>
}
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 21e:	88 81       	ld	r24, Y
 220:	88 23       	and	r24, r24
 222:	31 f0       	breq	.+12     	; 0x230 <LCDWriteString+0x18>
 224:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	a3 df       	rcall	.-186    	; 0x170 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 22a:	89 91       	ld	r24, Y+
 22c:	81 11       	cpse	r24, r1
 22e:	fb cf       	rjmp	.-10     	; 0x226 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	00 d0       	rcall	.+0      	; 0x244 <LCDWriteInt+0xe>
 244:	1f 92       	push	r1
 246:	1f 92       	push	r1
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 24e:	fe 01       	movw	r30, r28
 250:	31 96       	adiw	r30, 0x01	; 1
 252:	25 e0       	ldi	r18, 0x05	; 5
 254:	df 01       	movw	r26, r30
 256:	1d 92       	st	X+, r1
 258:	2a 95       	dec	r18
 25a:	e9 f7       	brne	.-6      	; 0x256 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	51 f0       	breq	.+20     	; 0x274 <LCDWriteInt+0x3e>
 260:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 262:	2a e0       	ldi	r18, 0x0A	; 10
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	a0 d2       	rcall	.+1344   	; 0x7aa <__divmodhi4>
 26a:	82 93       	st	-Z, r24
	val=val/10;
 26c:	86 2f       	mov	r24, r22
 26e:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	c9 f7       	brne	.-14     	; 0x266 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 274:	bf ef       	ldi	r27, 0xFF	; 255
 276:	eb 16       	cp	r14, r27
 278:	fb 06       	cpc	r15, r27
 27a:	69 f4       	brne	.+26     	; 0x296 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	81 11       	cpse	r24, r1
 280:	1d c0       	rjmp	.+58     	; 0x2bc <LCDWriteInt+0x86>
 282:	fe 01       	movw	r30, r28
 284:	32 96       	adiw	r30, 0x02	; 2
 286:	00 e0       	ldi	r16, 0x00	; 0
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	0f 5f       	subi	r16, 0xFF	; 255
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
 28e:	81 91       	ld	r24, Z+
 290:	88 23       	and	r24, r24
 292:	d9 f3       	breq	.-10     	; 0x28a <LCDWriteInt+0x54>
 294:	0f c0       	rjmp	.+30     	; 0x2b4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 296:	05 e0       	ldi	r16, 0x05	; 5
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	0e 19       	sub	r16, r14
 29c:	1f 09       	sbc	r17, r15
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2a0:	f8 01       	movw	r30, r16
 2a2:	81 91       	ld	r24, Z+
 2a4:	8f 01       	movw	r16, r30
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	80 5d       	subi	r24, 0xD0	; 208
 2aa:	62 df       	rcall	.-316    	; 0x170 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2ac:	0e 15       	cp	r16, r14
 2ae:	1f 05       	cpc	r17, r15
 2b0:	b9 f7       	brne	.-18     	; 0x2a0 <LCDWriteInt+0x6a>
 2b2:	11 c0       	rjmp	.+34     	; 0x2d6 <LCDWriteInt+0xa0>
 2b4:	05 30       	cpi	r16, 0x05	; 5
 2b6:	11 05       	cpc	r17, r1
 2b8:	1c f0       	brlt	.+6      	; 0x2c0 <LCDWriteInt+0x8a>
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	8c 0f       	add	r24, r28
 2c6:	9d 1f       	adc	r25, r29
 2c8:	08 0f       	add	r16, r24
 2ca:	19 1f       	adc	r17, r25
 2cc:	7e 01       	movw	r14, r28
 2ce:	96 e0       	ldi	r25, 0x06	; 6
 2d0:	e9 0e       	add	r14, r25
 2d2:	f1 1c       	adc	r15, r1
 2d4:	e5 cf       	rjmp	.-54     	; 0x2a0 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	08 95       	ret

000002ee <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 2ee:	88 32       	cpi	r24, 0x28	; 40
 2f0:	28 f4       	brcc	.+10     	; 0x2fc <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 2f2:	61 11       	cpse	r22, r1
 2f4:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	3a cf       	rjmp	.-396    	; 0x170 <LCDByte>
 2fc:	08 95       	ret

000002fe <mTimer>:
	while(temp != NULL){
		numItems++;
		temp = temp->next;
	}/*while*/	
	return(numItems);
}
 2fe:	ac 01       	movw	r20, r24
 300:	e1 e8       	ldi	r30, 0x81	; 129
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	90 81       	ld	r25, Z
 306:	98 60       	ori	r25, 0x08	; 8
 308:	90 83       	st	Z, r25
 30a:	88 ee       	ldi	r24, 0xE8	; 232
 30c:	93 e0       	ldi	r25, 0x03	; 3
 30e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 312:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 316:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 31a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 31e:	b1 9a       	sbi	0x16, 1	; 22
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	05 c0       	rjmp	.+10     	; 0x330 <mTimer+0x32>
 326:	b1 9b       	sbis	0x16, 1	; 22
 328:	fe cf       	rjmp	.-4      	; 0x326 <mTimer+0x28>
 32a:	b1 9a       	sbi	0x16, 1	; 22
 32c:	2f 5f       	subi	r18, 0xFF	; 255
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
 330:	24 17       	cp	r18, r20
 332:	35 07       	cpc	r19, r21
 334:	1c f4       	brge	.+6      	; 0x33c <mTimer+0x3e>
 336:	b1 9b       	sbis	0x16, 1	; 22
 338:	f6 cf       	rjmp	.-20     	; 0x326 <mTimer+0x28>
 33a:	f7 cf       	rjmp	.-18     	; 0x32a <mTimer+0x2c>
 33c:	08 95       	ret

0000033e <main>:
 33e:	6f 92       	push	r6
 340:	7f 92       	push	r7
 342:	8f 92       	push	r8
 344:	9f 92       	push	r9
 346:	af 92       	push	r10
 348:	bf 92       	push	r11
 34a:	cf 92       	push	r12
 34c:	df 92       	push	r13
 34e:	ef 92       	push	r14
 350:	ff 92       	push	r15
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	64 97       	sbiw	r28, 0x14	; 20
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	e1 e6       	ldi	r30, 0x61	; 97
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	10 e8       	ldi	r17, 0x80	; 128
 370:	10 83       	st	Z, r17
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 83       	st	Z, r24
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	24 df       	rcall	.-440    	; 0x1c2 <InitLCD>
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	f8 de       	rcall	.-528    	; 0x170 <LCDByte>
 380:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <head+0x1>
 384:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <head>
 388:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <tail+0x1>
 38c:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <tail>
 390:	14 b9       	out	0x04, r17	; 4
 392:	80 ef       	ldi	r24, 0xF0	; 240
 394:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 398:	eb e0       	ldi	r30, 0x0B	; 11
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	80 81       	ld	r24, Z
 39e:	80 67       	ori	r24, 0x70	; 112
 3a0:	80 83       	st	Z, r24
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	81 b9       	out	0x01, r24	; 1
 3a6:	87 b9       	out	0x07, r24	; 7
 3a8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 3ac:	80 ec       	ldi	r24, 0xC0	; 192
 3ae:	80 bb       	out	0x10, r24	; 16
 3b0:	e1 e9       	ldi	r30, 0x91	; 145
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	88 60       	ori	r24, 0x08	; 8
 3b8:	80 83       	st	Z, r24
 3ba:	80 81       	ld	r24, Z
 3bc:	83 60       	ori	r24, 0x03	; 3
 3be:	80 83       	st	Z, r24
 3c0:	e1 e8       	ldi	r30, 0x81	; 129
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	80 83       	st	Z, r24
 3ca:	88 e3       	ldi	r24, 0x38	; 56
 3cc:	9a e4       	ldi	r25, 0x4A	; 74
 3ce:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
 3d2:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
 3d6:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
 3da:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
 3de:	ea e7       	ldi	r30, 0x7A	; 122
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	80 68       	ori	r24, 0x80	; 128
 3e6:	80 83       	st	Z, r24
 3e8:	80 81       	ld	r24, Z
 3ea:	88 60       	ori	r24, 0x08	; 8
 3ec:	80 83       	st	Z, r24
 3ee:	84 b5       	in	r24, 0x24	; 36
 3f0:	83 60       	ori	r24, 0x03	; 3
 3f2:	84 bd       	out	0x24, r24	; 36
 3f4:	80 e6       	ldi	r24, 0x60	; 96
 3f6:	87 bd       	out	0x27, r24	; 39
 3f8:	84 b5       	in	r24, 0x24	; 36
 3fa:	80 68       	ori	r24, 0x80	; 128
 3fc:	84 bd       	out	0x24, r24	; 36
 3fe:	85 b5       	in	r24, 0x25	; 37
 400:	82 60       	ori	r24, 0x02	; 2
 402:	85 bd       	out	0x25, r24	; 37
 404:	f8 94       	cli
 406:	a9 e6       	ldi	r26, 0x69	; 105
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	8c 91       	ld	r24, X
 40c:	89 60       	ori	r24, 0x09	; 9
 40e:	8c 93       	st	X, r24
 410:	8d b3       	in	r24, 0x1d	; 29
 412:	83 60       	ori	r24, 0x03	; 3
 414:	8d bb       	out	0x1d, r24	; 29
 416:	aa e6       	ldi	r26, 0x6A	; 106
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	8c 91       	ld	r24, X
 41c:	8c 60       	ori	r24, 0x0C	; 12
 41e:	8c 93       	st	X, r24
 420:	ed 9a       	sbi	0x1d, 5	; 29
 422:	78 94       	sei
 424:	80 81       	ld	r24, Z
 426:	80 64       	ori	r24, 0x40	; 64
 428:	80 83       	st	Z, r24
 42a:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <ADC_result_flag>
 42e:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <ADC_result_flag+0x1>
 432:	89 2b       	or	r24, r25
 434:	d1 f3       	breq	.-12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 436:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <ADC_result_flag+0x1>
 43a:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <ADC_result_flag>
 43e:	61 2c       	mov	r6, r1
 440:	71 2c       	mov	r7, r1
 442:	6e 01       	movw	r12, r28
 444:	85 e1       	ldi	r24, 0x15	; 21
 446:	c8 0e       	add	r12, r24
 448:	d1 1c       	adc	r13, r1
 44a:	0a e7       	ldi	r16, 0x7A	; 122
 44c:	10 e0       	ldi	r17, 0x00	; 0
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	8e de       	rcall	.-740    	; 0x170 <LCDByte>
 454:	a1 e0       	ldi	r26, 0x01	; 1
 456:	6a 16       	cp	r6, r26
 458:	71 04       	cpc	r7, r1
 45a:	a9 f0       	breq	.+42     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 45c:	24 f4       	brge	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45e:	61 14       	cp	r6, r1
 460:	71 04       	cpc	r7, r1
 462:	51 f0       	breq	.+20     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 464:	25 c0       	rjmp	.+74     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	68 16       	cp	r6, r24
 46a:	71 04       	cpc	r7, r1
 46c:	99 f0       	breq	.+38     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 46e:	a3 e0       	ldi	r26, 0x03	; 3
 470:	6a 16       	cp	r6, r26
 472:	71 04       	cpc	r7, r1
 474:	b1 f0       	breq	.+44     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 476:	1c c0       	rjmp	.+56     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	38 df       	rcall	.-400    	; 0x2ee <LCDGotoXY>
 47e:	82 e8       	ldi	r24, 0x82	; 130
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	ca de       	rcall	.-620    	; 0x218 <LCDWriteString>
 484:	7a c0       	rjmp	.+244    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	31 df       	rcall	.-414    	; 0x2ee <LCDGotoXY>
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	92 e0       	ldi	r25, 0x02	; 2
 490:	c3 de       	rcall	.-634    	; 0x218 <LCDWriteString>
 492:	73 c0       	rjmp	.+230    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	2a df       	rcall	.-428    	; 0x2ee <LCDGotoXY>
 49a:	8c e0       	ldi	r24, 0x0C	; 12
 49c:	92 e0       	ldi	r25, 0x02	; 2
 49e:	bc de       	rcall	.-648    	; 0x218 <LCDWriteString>
 4a0:	6c c0       	rjmp	.+216    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	23 df       	rcall	.-442    	; 0x2ee <LCDGotoXY>
 4a8:	8a e1       	ldi	r24, 0x1A	; 26
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	b5 de       	rcall	.-662    	; 0x218 <LCDWriteString>
 4ae:	65 c0       	rjmp	.+202    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	1c df       	rcall	.-456    	; 0x2ee <LCDGotoXY>
 4b6:	88 e2       	ldi	r24, 0x28	; 40
 4b8:	92 e0       	ldi	r25, 0x02	; 2
 4ba:	ae de       	rcall	.-676    	; 0x218 <LCDWriteString>
 4bc:	5e c0       	rjmp	.+188    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 4be:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <inbound>
 4c2:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <inbound+0x1>
 4c6:	89 2b       	or	r24, r25
 4c8:	d1 f3       	breq	.-12     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ca:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <inbound+0x1>
 4ce:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <inbound>
 4d2:	c1 9a       	sbi	0x18, 1	; 24
 4d4:	19 c0       	rjmp	.+50     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4d6:	d8 01       	movw	r26, r16
 4d8:	8c 91       	ld	r24, X
 4da:	80 64       	ori	r24, 0x40	; 64
 4dc:	8c 93       	st	X, r24
 4de:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <ADC_result_flag>
 4e2:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <ADC_result_flag+0x1>
 4e6:	89 2b       	or	r24, r25
 4e8:	d1 f3       	breq	.-12     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4ea:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <ADC_result_flag+0x1>
 4ee:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <ADC_result_flag>
 4f2:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <ADC_result>
 4f6:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <ADC_result+0x1>
 4fa:	8e 15       	cp	r24, r14
 4fc:	9f 05       	cpc	r25, r15
 4fe:	20 f4       	brcc	.+8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 500:	e0 90 c9 02 	lds	r14, 0x02C9	; 0x8002c9 <ADC_result>
 504:	f0 90 ca 02 	lds	r15, 0x02CA	; 0x8002ca <ADC_result+0x1>
 508:	c1 9b       	sbis	0x18, 1	; 24
 50a:	e5 cf       	rjmp	.-54     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 50c:	e1 92       	st	Z+, r14
 50e:	f1 92       	st	Z+, r15
 510:	ce 16       	cp	r12, r30
 512:	df 06       	cpc	r13, r31
 514:	a1 f6       	brne	.-88     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 516:	a9 80       	ldd	r10, Y+1	; 0x01
 518:	ba 80       	ldd	r11, Y+2	; 0x02
 51a:	fe 01       	movw	r30, r28
 51c:	33 96       	adiw	r30, 0x03	; 3
 51e:	45 01       	movw	r8, r10
 520:	81 91       	ld	r24, Z+
 522:	91 91       	ld	r25, Z+
 524:	8a 15       	cp	r24, r10
 526:	9b 05       	cpc	r25, r11
 528:	08 f4       	brcc	.+2      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 52a:	5c 01       	movw	r10, r24
 52c:	88 16       	cp	r8, r24
 52e:	99 06       	cpc	r9, r25
 530:	08 f4       	brcc	.+2      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 532:	4c 01       	movw	r8, r24
 534:	ec 15       	cp	r30, r12
 536:	fd 05       	cpc	r31, r13
 538:	99 f7       	brne	.-26     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	d7 de       	rcall	.-594    	; 0x2ee <LCDGotoXY>
 540:	64 e0       	ldi	r22, 0x04	; 4
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	c5 01       	movw	r24, r10
 546:	77 de       	rcall	.-786    	; 0x236 <LCDWriteInt>
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	d0 de       	rcall	.-608    	; 0x2ee <LCDGotoXY>
 54e:	8e e2       	ldi	r24, 0x2E	; 46
 550:	92 e0       	ldi	r25, 0x02	; 2
 552:	62 de       	rcall	.-828    	; 0x218 <LCDWriteString>
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	88 e0       	ldi	r24, 0x08	; 8
 558:	ca de       	rcall	.-620    	; 0x2ee <LCDGotoXY>
 55a:	64 e0       	ldi	r22, 0x04	; 4
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	c4 01       	movw	r24, r8
 560:	6a de       	rcall	.-812    	; 0x236 <LCDWriteInt>
 562:	88 e8       	ldi	r24, 0x88	; 136
 564:	93 e1       	ldi	r25, 0x13	; 19
 566:	cb de       	rcall	.-618    	; 0x2fe <mTimer>
 568:	bf ef       	ldi	r27, 0xFF	; 255
 56a:	6b 1a       	sub	r6, r27
 56c:	7b 0a       	sbc	r7, r27
 56e:	84 e0       	ldi	r24, 0x04	; 4
 570:	68 16       	cp	r6, r24
 572:	71 04       	cpc	r7, r1
 574:	09 f0       	breq	.+2      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 576:	6b cf       	rjmp	.-298    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 578:	03 c0       	rjmp	.+6      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 57a:	fe 01       	movw	r30, r28
 57c:	31 96       	adiw	r30, 0x01	; 1
 57e:	9f cf       	rjmp	.-194    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	64 96       	adiw	r28, 0x14	; 20
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	1f 91       	pop	r17
 596:	0f 91       	pop	r16
 598:	ff 90       	pop	r15
 59a:	ef 90       	pop	r14
 59c:	df 90       	pop	r13
 59e:	cf 90       	pop	r12
 5a0:	bf 90       	pop	r11
 5a2:	af 90       	pop	r10
 5a4:	9f 90       	pop	r9
 5a6:	8f 90       	pop	r8
 5a8:	7f 90       	pop	r7
 5aa:	6f 90       	pop	r6
 5ac:	08 95       	ret

000005ae <__vector_1>:

// Killswitch ISR
ISR(INT0_vect)
{
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
	// Stop motor and wait for reset
	PORTL |= 0xF0;
 5b8:	eb e0       	ldi	r30, 0x0B	; 11
 5ba:	f1 e0       	ldi	r31, 0x01	; 1
 5bc:	80 81       	ld	r24, Z
 5be:	80 6f       	ori	r24, 0xF0	; 240
 5c0:	80 83       	st	Z, r24
	LCDClear();
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	d4 dd       	rcall	.-1112   	; 0x170 <LCDByte>
	LCDWriteStringXY(0,0,"Kill Switch Hit");
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 de       	rcall	.-736    	; 0x2ee <LCDGotoXY>
 5ce:	89 e9       	ldi	r24, 0x99	; 153
 5d0:	92 e0       	ldi	r25, 0x02	; 2
 5d2:	22 de       	rcall	.-956    	; 0x218 <LCDWriteString>
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__vector_1+0x26>

000005d6 <__vector_2>:
	while(1);
}

// Pause/resume conveyor belt ISR
ISR(INT1_vect)
{
 5d6:	1f 92       	push	r1
 5d8:	0f 92       	push	r0
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	0f 92       	push	r0
 5de:	11 24       	eor	r1, r1
 5e0:	0b b6       	in	r0, 0x3b	; 59
 5e2:	0f 92       	push	r0
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	6f 93       	push	r22
 5ee:	7f 93       	push	r23
 5f0:	8f 93       	push	r24
 5f2:	9f 93       	push	r25
 5f4:	af 93       	push	r26
 5f6:	bf 93       	push	r27
 5f8:	ef 93       	push	r30
 5fa:	ff 93       	push	r31
	// Brake high + debounce
	PORTL |= 0xF0;
 5fc:	eb e0       	ldi	r30, 0x0B	; 11
 5fe:	f1 e0       	ldi	r31, 0x01	; 1
 600:	80 81       	ld	r24, Z
 602:	80 6f       	ori	r24, 0xF0	; 240
 604:	80 83       	st	Z, r24
	mTimer(25);
 606:	89 e1       	ldi	r24, 0x19	; 25
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	79 de       	rcall	.-782    	; 0x2fe <mTimer>
	
	if( running )
 60c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 610:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 614:	89 2b       	or	r24, r25
 616:	49 f0       	breq	.+18     	; 0x62a <__vector_2+0x54>
	{
		// Pause
		PORTL &= 0xFF;
 618:	eb e0       	ldi	r30, 0x0B	; 11
 61a:	f1 e0       	ldi	r31, 0x01	; 1
 61c:	80 81       	ld	r24, Z
 61e:	80 83       	st	Z, r24
		running = 0;
 620:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 624:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 628:	0b c0       	rjmp	.+22     	; 0x640 <__vector_2+0x6a>
	}
	else
	{
		// Resume
		PORTL &= 0x7F;
 62a:	eb e0       	ldi	r30, 0x0B	; 11
 62c:	f1 e0       	ldi	r31, 0x01	; 1
 62e:	80 81       	ld	r24, Z
 630:	8f 77       	andi	r24, 0x7F	; 127
 632:	80 83       	st	Z, r24
		running = 1;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 63c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
}
 640:	ff 91       	pop	r31
 642:	ef 91       	pop	r30
 644:	bf 91       	pop	r27
 646:	af 91       	pop	r26
 648:	9f 91       	pop	r25
 64a:	8f 91       	pop	r24
 64c:	7f 91       	pop	r23
 64e:	6f 91       	pop	r22
 650:	5f 91       	pop	r21
 652:	4f 91       	pop	r20
 654:	3f 91       	pop	r19
 656:	2f 91       	pop	r18
 658:	0f 90       	pop	r0
 65a:	0b be       	out	0x3b, r0	; 59
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__vector_3>:

// Stepper homing interrupt
ISR(INT2_vect)
{
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
	disk_location = 'b';
 674:	82 e6       	ldi	r24, 0x62	; 98
 676:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <disk_location>
	homed_flag = 1;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <homed_flag+0x1>
 682:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <homed_flag>
	EIMSK &= ~_BV(INT2);
 686:	ea 98       	cbi	0x1d, 2	; 29
}
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	0f 90       	pop	r0
 68e:	0f be       	out	0x3f, r0	; 63
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__vector_4>:

// Ramp down interrupt
ISR(INT3_vect)
{
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	8f 93       	push	r24
 6a2:	9f 93       	push	r25
	ramp_down = 1;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <__data_end+0x1>
 6ac:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <__data_end>
}
 6b0:	9f 91       	pop	r25
 6b2:	8f 91       	pop	r24
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <__vector_5>:

// End of conveyor belt interrupt
ISR(INT4_vect)
{
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	0b b6       	in	r0, 0x3b	; 59
 6ca:	0f 92       	push	r0
 6cc:	8f 93       	push	r24
 6ce:	ef 93       	push	r30
 6d0:	ff 93       	push	r31
	// Stop the belt
	PORTL |= 0xFF;
 6d2:	eb e0       	ldi	r30, 0x0B	; 11
 6d4:	f1 e0       	ldi	r31, 0x01	; 1
 6d6:	80 81       	ld	r24, Z
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	80 83       	st	Z, r24

	// Deallocate item
	//destroyLink(&oldItem);

	// Resume the belt
	PORTL &= 0x7F;
 6dc:	80 81       	ld	r24, Z
 6de:	8f 77       	andi	r24, 0x7F	; 127
 6e0:	80 83       	st	Z, r24
}
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	8f 91       	pop	r24
 6e8:	0f 90       	pop	r0
 6ea:	0b be       	out	0x3b, r0	; 59
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__vector_6>:

// First sensor trigger
ISR(INT5_vect)
{
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	8f 93       	push	r24
 702:	9f 93       	push	r25
	inbound = 1;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <inbound+0x1>
 70c:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <inbound>
}
 710:	9f 91       	pop	r25
 712:	8f 91       	pop	r24
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
 71a:	1f 90       	pop	r1
 71c:	18 95       	reti

0000071e <__vector_29>:
	

// ISR for ADC Conversion Completion
ISR(ADC_vect)
{
 71e:	1f 92       	push	r1
 720:	0f 92       	push	r0
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	0f 92       	push	r0
 726:	11 24       	eor	r1, r1
 728:	2f 93       	push	r18
 72a:	8f 93       	push	r24
 72c:	9f 93       	push	r25
	// Get ADC result and indicate successful conversion
	ADC_result = 0;
 72e:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <ADC_result+0x1>
 732:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <ADC_result>
	ADC_result |= ADCL;
 736:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 73a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <ADC_result>
 73e:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <ADC_result+0x1>
 742:	82 2b       	or	r24, r18
 744:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <ADC_result+0x1>
 748:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <ADC_result>
	ADC_result |= (ADCH & 0x03) << 8;
 74c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 750:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <ADC_result>
 754:	90 91 ca 02 	lds	r25, 0x02CA	; 0x8002ca <ADC_result+0x1>
 758:	23 70       	andi	r18, 0x03	; 3
 75a:	92 2b       	or	r25, r18
 75c:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <ADC_result+0x1>
 760:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <ADC_result>
	ADC_result_flag = 1;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <ADC_result_flag+0x1>
 76c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <ADC_result_flag>
}
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	2f 91       	pop	r18
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <__vector_default>:

ISR(BADISR_vect)
{
 780:	1f 92       	push	r1
 782:	0f 92       	push	r0
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	0f 92       	push	r0
 788:	11 24       	eor	r1, r1
	LCDClear();
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	f0 dc       	rcall	.-1568   	; 0x170 <LCDByte>
	LCDWriteStringXY(1,0, "Something went");
 790:	60 e0       	ldi	r22, 0x00	; 0
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	ac dd       	rcall	.-1192   	; 0x2ee <LCDGotoXY>
 796:	89 ea       	ldi	r24, 0xA9	; 169
 798:	92 e0       	ldi	r25, 0x02	; 2
 79a:	3e dd       	rcall	.-1412   	; 0x218 <LCDWriteString>
	LCDWriteStringXY(6,1, "wrong!");
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	86 e0       	ldi	r24, 0x06	; 6
 7a0:	a6 dd       	rcall	.-1204   	; 0x2ee <LCDGotoXY>
 7a2:	88 eb       	ldi	r24, 0xB8	; 184
 7a4:	92 e0       	ldi	r25, 0x02	; 2
 7a6:	38 dd       	rcall	.-1424   	; 0x218 <LCDWriteString>
 7a8:	ff cf       	rjmp	.-2      	; 0x7a8 <__vector_default+0x28>

000007aa <__divmodhi4>:
 7aa:	97 fb       	bst	r25, 7
 7ac:	07 2e       	mov	r0, r23
 7ae:	16 f4       	brtc	.+4      	; 0x7b4 <__divmodhi4+0xa>
 7b0:	00 94       	com	r0
 7b2:	06 d0       	rcall	.+12     	; 0x7c0 <__divmodhi4_neg1>
 7b4:	77 fd       	sbrc	r23, 7
 7b6:	08 d0       	rcall	.+16     	; 0x7c8 <__divmodhi4_neg2>
 7b8:	0b d0       	rcall	.+22     	; 0x7d0 <__udivmodhi4>
 7ba:	07 fc       	sbrc	r0, 7
 7bc:	05 d0       	rcall	.+10     	; 0x7c8 <__divmodhi4_neg2>
 7be:	3e f4       	brtc	.+14     	; 0x7ce <__divmodhi4_exit>

000007c0 <__divmodhi4_neg1>:
 7c0:	90 95       	com	r25
 7c2:	81 95       	neg	r24
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	08 95       	ret

000007c8 <__divmodhi4_neg2>:
 7c8:	70 95       	com	r23
 7ca:	61 95       	neg	r22
 7cc:	7f 4f       	sbci	r23, 0xFF	; 255

000007ce <__divmodhi4_exit>:
 7ce:	08 95       	ret

000007d0 <__udivmodhi4>:
 7d0:	aa 1b       	sub	r26, r26
 7d2:	bb 1b       	sub	r27, r27
 7d4:	51 e1       	ldi	r21, 0x11	; 17
 7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <__udivmodhi4_ep>

000007d8 <__udivmodhi4_loop>:
 7d8:	aa 1f       	adc	r26, r26
 7da:	bb 1f       	adc	r27, r27
 7dc:	a6 17       	cp	r26, r22
 7de:	b7 07       	cpc	r27, r23
 7e0:	10 f0       	brcs	.+4      	; 0x7e6 <__udivmodhi4_ep>
 7e2:	a6 1b       	sub	r26, r22
 7e4:	b7 0b       	sbc	r27, r23

000007e6 <__udivmodhi4_ep>:
 7e6:	88 1f       	adc	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	5a 95       	dec	r21
 7ec:	a9 f7       	brne	.-22     	; 0x7d8 <__udivmodhi4_loop>
 7ee:	80 95       	com	r24
 7f0:	90 95       	com	r25
 7f2:	bc 01       	movw	r22, r24
 7f4:	cd 01       	movw	r24, r26
 7f6:	08 95       	ret

000007f8 <_exit>:
 7f8:	f8 94       	cli

000007fa <__stop_program>:
 7fa:	ff cf       	rjmp	.-2      	; 0x7fa <__stop_program>
