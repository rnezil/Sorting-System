
ConveyorBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800200  00800200  00000442  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019f6  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e99  00000000  00000000  00001f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abb  00000000  00000000  00002de3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000038a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000735  00000000  00000000  00003a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb4  00000000  00000000  00004181  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00004d35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8b c1       	rjmp	.+790    	; 0x320 <__vector_2>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	92 c1       	rjmp	.+804    	; 0x39a <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ec       	ldi	r30, 0xCE	; 206
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 30       	cpi	r26, 0x07	; 7
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	7c d0       	rcall	.+248    	; 0x218 <main>
 120:	54 c1       	rjmp	.+680    	; 0x3ca <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCDBusyLoop+0xc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCDBusyLoop+0xe>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 132:	47 9a       	sbi	0x08, 7	; 8
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 138:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 13a:	82 95       	swap	r24
 13c:	80 7f       	andi	r24, 0xF0	; 240
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCDBusyLoop+0x1e>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 142:	47 98       	cbi	0x08, 7	; 8
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL
		
		SET_E();
 14c:	47 9a       	sbi	0x08, 7	; 8
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDBusyLoop+0x2c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCDBusyLoop+0x2e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 152:	96 b1       	in	r25, 0x06	; 6
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCDBusyLoop+0x32>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCDBusyLoop+0x34>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 158:	47 98       	cbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
		
	}while(busy);
 162:	88 23       	and	r24, r24
 164:	34 f3       	brlt	.-52     	; 0x132 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
 166:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 168:	87 b1       	in	r24, 0x07	; 7
 16a:	8f 60       	ori	r24, 0x0F	; 15
 16c:	87 b9       	out	0x07, r24	; 7
 16e:	08 95       	ret

00000170 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 170:	28 2f       	mov	r18, r24
 172:	22 95       	swap	r18
 174:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 176:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 178:	61 11       	cpse	r22, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <LCDByte+0x10>
	CLEAR_RS();
 17c:	46 98       	cbi	0x08, 6	; 8
 17e:	01 c0       	rjmp	.+2      	; 0x182 <LCDByte+0x12>
else
	SET_RS();
 180:	46 9a       	sbi	0x08, 6	; 8
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCDByte+0x14>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCDByte+0x16>

_delay_us(0.500);		//tAS


SET_E();
 186:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 188:	98 b1       	in	r25, 0x08	; 8
 18a:	90 7f       	andi	r25, 0xF0	; 240
 18c:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 18e:	98 b9       	out	0x08, r25	; 8
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <LCDByte+0x22>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCDByte+0x28>
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 198:	47 98       	cbi	0x08, 7	; 8
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDByte+0x2c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCDByte+0x32>

_delay_us(1);

//Send the lower nibble
SET_E();
 1a2:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1a4:	98 b1       	in	r25, 0x08	; 8
 1a6:	90 7f       	andi	r25, 0xF0	; 240
 1a8:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDByte+0x3e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCDByte+0x44>
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1b4:	47 98       	cbi	0x08, 7	; 8
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCDByte+0x48>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCDByte+0x4e>

_delay_us(1);			//tEL

LCDBusyLoop();
 1be:	b2 cf       	rjmp	.-156    	; 0x124 <LCDBusyLoop>
 1c0:	08 95       	ret

000001c2 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f e5       	ldi	r24, 0x5F	; 95
 1c8:	9a ee       	ldi	r25, 0xEA	; 234
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <InitLCD+0x8>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <InitLCD+0xe>
 1d0:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1d2:	87 b1       	in	r24, 0x07	; 7
 1d4:	8f 60       	ori	r24, 0x0F	; 15
 1d6:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 1d8:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1da:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1dc:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 1e4:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 1e6:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 1e8:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <InitLCD+0x2a>
 1ec:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 1ee:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1f0:	41 9a       	sbi	0x08, 1	; 8
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <InitLCD+0x32>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <InitLCD+0x38>
	_delay_us(1);
	
	CLEAR_E();
 1fa:	47 98       	cbi	0x08, 7	; 8
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <InitLCD+0x3c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <InitLCD+0x42>
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 204:	8f df       	rcall	.-226    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	8c 2f       	mov	r24, r28
 20a:	8c 60       	ori	r24, 0x0C	; 12
 20c:	b1 df       	rcall	.-158    	; 0x170 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	ae df       	rcall	.-164    	; 0x170 <LCDByte>
}
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <main>:
		LCDWriteIntXY(14,1, items_sorted, 2);
	}
	else if (disk_location == 'a'){
		LCDWriteStringXY(0, 0, "Disk on Aluminum" );
		LCDWriteStringXY(0, 1, "Items Sorted: ");
		LCDWriteIntXY(14,1, items_sorted, 2);
 218:	e1 e6       	ldi	r30, 0x61	; 97
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	c0 e8       	ldi	r28, 0x80	; 128
 21e:	c0 83       	st	Z, r28
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 83       	st	Z, r24
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	cd df       	rcall	.-102    	; 0x1c2 <InitLCD>
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	a1 df       	rcall	.-190    	; 0x170 <LCDByte>
 22e:	f8 94       	cli
 230:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <forwards>
 234:	c4 b9       	out	0x04, r28	; 4
 236:	80 ef       	ldi	r24, 0xF0	; 240
 238:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 23c:	eb e0       	ldi	r30, 0x0B	; 11
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	80 81       	ld	r24, Z
 242:	80 6f       	ori	r24, 0xF0	; 240
 244:	80 83       	st	Z, r24
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	81 b9       	out	0x01, r24	; 1
 24a:	87 b9       	out	0x07, r24	; 7
 24c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 250:	80 ec       	ldi	r24, 0xC0	; 192
 252:	80 bb       	out	0x10, r24	; 16
 254:	e1 e8       	ldi	r30, 0x81	; 129
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	80 83       	st	Z, r24
 25e:	8d b3       	in	r24, 0x1d	; 29
 260:	87 60       	ori	r24, 0x07	; 7
 262:	8d bb       	out	0x1d, r24	; 29
 264:	8a e2       	ldi	r24, 0x2A	; 42
 266:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
 26a:	ea e7       	ldi	r30, 0x7A	; 122
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 68       	ori	r24, 0x80	; 128
 272:	80 83       	st	Z, r24
 274:	80 81       	ld	r24, Z
 276:	88 60       	ori	r24, 0x08	; 8
 278:	80 83       	st	Z, r24
 27a:	80 81       	ld	r24, Z
 27c:	80 62       	ori	r24, 0x20	; 32
 27e:	80 83       	st	Z, r24
 280:	84 b5       	in	r24, 0x24	; 36
 282:	83 60       	ori	r24, 0x03	; 3
 284:	84 bd       	out	0x24, r24	; 36
 286:	8f e3       	ldi	r24, 0x3F	; 63
 288:	87 bd       	out	0x27, r24	; 39
 28a:	84 b5       	in	r24, 0x24	; 36
 28c:	80 68       	ori	r24, 0x80	; 128
 28e:	84 bd       	out	0x24, r24	; 36
 290:	85 b5       	in	r24, 0x25	; 37
 292:	82 60       	ori	r24, 0x02	; 2
 294:	85 bd       	out	0x25, r24	; 37
 296:	78 94       	sei
 298:	80 81       	ld	r24, Z
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	80 83       	st	Z, r24
 29e:	e8 e0       	ldi	r30, 0x08	; 8
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <ADC_result_flag>
 2a6:	88 23       	and	r24, r24
 2a8:	b1 f0       	breq	.+44     	; 0x2d6 <main+0xbe>
 2aa:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <ADC_result_msbs>
 2ae:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <ADC_result_lsbs>
 2b2:	30 e4       	ldi	r19, 0x40	; 64
 2b4:	93 9f       	mul	r25, r19
 2b6:	c0 01       	movw	r24, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	92 2f       	mov	r25, r18
 2bc:	96 95       	lsr	r25
 2be:	96 95       	lsr	r25
 2c0:	89 2b       	or	r24, r25
 2c2:	80 83       	st	Z, r24
 2c4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <ADC_result_lsbs>
 2c8:	82 95       	swap	r24
 2ca:	88 0f       	add	r24, r24
 2cc:	88 0f       	add	r24, r24
 2ce:	80 7c       	andi	r24, 0xC0	; 192
 2d0:	81 bb       	out	0x11, r24	; 17
 2d2:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <ADC_result_flag>
 2d6:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2da:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 2de:	e1 cf       	rjmp	.-62     	; 0x2a2 <main+0x8a>

000002e0 <mTimer>:
 2e0:	ac 01       	movw	r20, r24
 2e2:	e1 e8       	ldi	r30, 0x81	; 129
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	90 81       	ld	r25, Z
 2e8:	98 60       	ori	r25, 0x08	; 8
 2ea:	90 83       	st	Z, r25
 2ec:	88 ee       	ldi	r24, 0xE8	; 232
 2ee:	93 e0       	ldi	r25, 0x03	; 3
 2f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 2f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 2fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 300:	b1 9a       	sbi	0x16, 1	; 22
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	05 c0       	rjmp	.+10     	; 0x312 <mTimer+0x32>
 308:	b1 9b       	sbis	0x16, 1	; 22
 30a:	fe cf       	rjmp	.-4      	; 0x308 <mTimer+0x28>
 30c:	b1 9a       	sbi	0x16, 1	; 22
 30e:	2f 5f       	subi	r18, 0xFF	; 255
 310:	3f 4f       	sbci	r19, 0xFF	; 255
 312:	24 17       	cp	r18, r20
 314:	35 07       	cpc	r19, r21
 316:	1c f4       	brge	.+6      	; 0x31e <mTimer+0x3e>
 318:	b1 9b       	sbis	0x16, 1	; 22
 31a:	f6 cf       	rjmp	.-20     	; 0x308 <mTimer+0x28>
 31c:	f7 cf       	rjmp	.-18     	; 0x30c <mTimer+0x2c>
 31e:	08 95       	ret

00000320 <__vector_2>:
}
*/

// Stop conveyor belt ISR
ISR(INT1_vect)
{
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	0b b6       	in	r0, 0x3b	; 59
 32c:	0f 92       	push	r0
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	4f 93       	push	r20
 334:	5f 93       	push	r21
 336:	6f 93       	push	r22
 338:	7f 93       	push	r23
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
 342:	ef 93       	push	r30
 344:	ff 93       	push	r31
	// Don't brake low + debounce
	PORTL |= 0xF0;
 346:	eb e0       	ldi	r30, 0x0B	; 11
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	80 81       	ld	r24, Z
 34c:	80 6f       	ori	r24, 0xF0	; 240
 34e:	80 83       	st	Z, r24
	mTimer(20);
 350:	84 e1       	ldi	r24, 0x14	; 20
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	c5 df       	rcall	.-118    	; 0x2e0 <mTimer>
	
	if( forwards )
 356:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <forwards>
 35a:	88 23       	and	r24, r24
 35c:	19 f0       	breq	.+6      	; 0x364 <__vector_2+0x44>
	{
		// CW/backwards rotation
		//PORTL &= 0xBF;
		forwards = 0x00;
 35e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <forwards>
 362:	08 c0       	rjmp	.+16     	; 0x374 <__vector_2+0x54>
	}
	else
	{
		// CCW/forwards rotation
		PORTL &= 0x7F;
 364:	eb e0       	ldi	r30, 0x0B	; 11
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	80 81       	ld	r24, Z
 36a:	8f 77       	andi	r24, 0x7F	; 127
 36c:	80 83       	st	Z, r24
		forwards = 0x01;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <forwards>
	}
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0b be       	out	0x3b, r0	; 59
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <__vector_29>:
	EIMSK = 0x00;	// Disables the INT2 interrupt
}*/

// ISR for ADC Conversion Completion
ISR(ADC_vect)
{
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
 3a4:	8f 93       	push	r24
	// Get ADC result
	ADC_result_lsbs = ADCL;
 3a6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 3aa:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <ADC_result_lsbs>
	ADC_result_msbs = ADCH & 0x03;
 3ae:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 3b2:	83 70       	andi	r24, 0x03	; 3
 3b4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <ADC_result_msbs>
	
	// Set flag indicating a result has been written
	ADC_result_flag = 1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <ADC_result_flag>
 3be:	8f 91       	pop	r24
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
