
ConveyorBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800200  00000a62  00000af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008003dc  008003dc  00000cd2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e44  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f13  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bcd  00000000  00000000  00003b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00004728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079d  00000000  00000000  00004970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e3a  00000000  00000000  0000510d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00005f47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	77 c4       	rjmp	.+2286   	; 0x8f4 <__vector_1>
   6:	00 00       	nop
   8:	89 c4       	rjmp	.+2322   	; 0x91c <__vector_2>
   a:	00 00       	nop
   c:	ba c4       	rjmp	.+2420   	; 0x982 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	a0 c4       	rjmp	.+2368   	; 0x9b6 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e6       	ldi	r30, 0x62	; 98
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 3d       	cpi	r26, 0xDC	; 220
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ac ed       	ldi	r26, 0xDC	; 220
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 3f       	cpi	r26, 0xF0	; 240
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	21 d3       	rcall	.+1602   	; 0x762 <main>
 120:	9e c4       	rjmp	.+2364   	; 0xa5e <_exit>

00000122 <__bad_interrupt>:
 122:	61 c4       	rjmp	.+2242   	; 0x9e6 <__vector_default>

00000124 <LCDBusyLoop>:
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7
 12a:	45 9a       	sbi	0x08, 5	; 8
 12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCDBusyLoop+0xc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCDBusyLoop+0xe>
 132:	47 9a       	sbi	0x08, 7	; 8
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCDBusyLoop+0x14>
 138:	86 b1       	in	r24, 0x06	; 6
 13a:	82 95       	swap	r24
 13c:	80 7f       	andi	r24, 0xF0	; 240
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCDBusyLoop+0x1e>
 142:	47 98       	cbi	0x08, 7	; 8
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>
 14c:	47 9a       	sbi	0x08, 7	; 8
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDBusyLoop+0x2c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCDBusyLoop+0x2e>
 152:	96 b1       	in	r25, 0x06	; 6
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCDBusyLoop+0x32>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCDBusyLoop+0x34>
 158:	47 98       	cbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
 162:	88 23       	and	r24, r24
 164:	34 f3       	brlt	.-52     	; 0x132 <LCDBusyLoop+0xe>
 166:	45 98       	cbi	0x08, 5	; 8
 168:	87 b1       	in	r24, 0x07	; 7
 16a:	8f 60       	ori	r24, 0x0F	; 15
 16c:	87 b9       	out	0x07, r24	; 7
 16e:	08 95       	ret

00000170 <LCDByte>:
 170:	28 2f       	mov	r18, r24
 172:	22 95       	swap	r18
 174:	2f 70       	andi	r18, 0x0F	; 15
 176:	8f 70       	andi	r24, 0x0F	; 15
 178:	61 11       	cpse	r22, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <LCDByte+0x10>
 17c:	46 98       	cbi	0x08, 6	; 8
 17e:	01 c0       	rjmp	.+2      	; 0x182 <LCDByte+0x12>
 180:	46 9a       	sbi	0x08, 6	; 8
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCDByte+0x14>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCDByte+0x16>
 186:	47 9a       	sbi	0x08, 7	; 8
 188:	98 b1       	in	r25, 0x08	; 8
 18a:	90 7f       	andi	r25, 0xF0	; 240
 18c:	92 2b       	or	r25, r18
 18e:	98 b9       	out	0x08, r25	; 8
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <LCDByte+0x22>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCDByte+0x28>
 198:	47 98       	cbi	0x08, 7	; 8
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDByte+0x2c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCDByte+0x32>
 1a2:	47 9a       	sbi	0x08, 7	; 8
 1a4:	98 b1       	in	r25, 0x08	; 8
 1a6:	90 7f       	andi	r25, 0xF0	; 240
 1a8:	89 2b       	or	r24, r25
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDByte+0x3e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCDByte+0x44>
 1b4:	47 98       	cbi	0x08, 7	; 8
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCDByte+0x48>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCDByte+0x4e>
 1be:	b2 cf       	rjmp	.-156    	; 0x124 <LCDBusyLoop>
 1c0:	08 95       	ret

000001c2 <InitLCD>:
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f e5       	ldi	r24, 0x5F	; 95
 1c8:	9a ee       	ldi	r25, 0xEA	; 234
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <InitLCD+0x8>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <InitLCD+0xe>
 1d0:	00 00       	nop
 1d2:	87 b1       	in	r24, 0x07	; 7
 1d4:	8f 60       	ori	r24, 0x0F	; 15
 1d6:	87 b9       	out	0x07, r24	; 7
 1d8:	3f 9a       	sbi	0x07, 7	; 7
 1da:	3e 9a       	sbi	0x07, 6	; 7
 1dc:	3d 9a       	sbi	0x07, 5	; 7
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	88 b9       	out	0x08, r24	; 8
 1e4:	47 98       	cbi	0x08, 7	; 8
 1e6:	45 98       	cbi	0x08, 5	; 8
 1e8:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <InitLCD+0x2a>
 1ec:	00 00       	nop
 1ee:	47 9a       	sbi	0x08, 7	; 8
 1f0:	41 9a       	sbi	0x08, 1	; 8
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <InitLCD+0x32>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <InitLCD+0x38>
 1fa:	47 98       	cbi	0x08, 7	; 8
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <InitLCD+0x3c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <InitLCD+0x42>
 204:	8f df       	rcall	.-226    	; 0x124 <LCDBusyLoop>
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	8c 2f       	mov	r24, r28
 20a:	8c 60       	ori	r24, 0x0C	; 12
 20c:	b1 df       	rcall	.-158    	; 0x170 <LCDByte>
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	ae df       	rcall	.-164    	; 0x170 <LCDByte>
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCDWriteString>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
 21e:	88 81       	ld	r24, Y
 220:	88 23       	and	r24, r24
 222:	31 f0       	breq	.+12     	; 0x230 <LCDWriteString+0x18>
 224:	21 96       	adiw	r28, 0x01	; 1
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	a3 df       	rcall	.-186    	; 0x170 <LCDByte>
 22a:	89 91       	ld	r24, Y+
 22c:	81 11       	cpse	r24, r1
 22e:	fb cf       	rjmp	.-10     	; 0x226 <LCDWriteString+0xe>
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <LCDWriteInt>:
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	00 d0       	rcall	.+0      	; 0x244 <LCDWriteInt+0xe>
 244:	1f 92       	push	r1
 246:	1f 92       	push	r1
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	7b 01       	movw	r14, r22
 24e:	fe 01       	movw	r30, r28
 250:	31 96       	adiw	r30, 0x01	; 1
 252:	25 e0       	ldi	r18, 0x05	; 5
 254:	df 01       	movw	r26, r30
 256:	1d 92       	st	X+, r1
 258:	2a 95       	dec	r18
 25a:	e9 f7       	brne	.-6      	; 0x256 <LCDWriteInt+0x20>
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	51 f0       	breq	.+20     	; 0x274 <LCDWriteInt+0x3e>
 260:	35 96       	adiw	r30, 0x05	; 5
 262:	2a e0       	ldi	r18, 0x0A	; 10
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	d3 d3       	rcall	.+1958   	; 0xa10 <__divmodhi4>
 26a:	82 93       	st	-Z, r24
 26c:	86 2f       	mov	r24, r22
 26e:	97 2f       	mov	r25, r23
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	c9 f7       	brne	.-14     	; 0x266 <LCDWriteInt+0x30>
 274:	bf ef       	ldi	r27, 0xFF	; 255
 276:	eb 16       	cp	r14, r27
 278:	fb 06       	cpc	r15, r27
 27a:	69 f4       	brne	.+26     	; 0x296 <LCDWriteInt+0x60>
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	81 11       	cpse	r24, r1
 280:	1d c0       	rjmp	.+58     	; 0x2bc <LCDWriteInt+0x86>
 282:	fe 01       	movw	r30, r28
 284:	32 96       	adiw	r30, 0x02	; 2
 286:	00 e0       	ldi	r16, 0x00	; 0
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	0f 5f       	subi	r16, 0xFF	; 255
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
 28e:	81 91       	ld	r24, Z+
 290:	88 23       	and	r24, r24
 292:	d9 f3       	breq	.-10     	; 0x28a <LCDWriteInt+0x54>
 294:	0f c0       	rjmp	.+30     	; 0x2b4 <LCDWriteInt+0x7e>
 296:	05 e0       	ldi	r16, 0x05	; 5
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	0e 19       	sub	r16, r14
 29c:	1f 09       	sbc	r17, r15
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <LCDWriteInt+0x7e>
 2a0:	f8 01       	movw	r30, r16
 2a2:	81 91       	ld	r24, Z+
 2a4:	8f 01       	movw	r16, r30
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	80 5d       	subi	r24, 0xD0	; 208
 2aa:	62 df       	rcall	.-316    	; 0x170 <LCDByte>
 2ac:	0e 15       	cp	r16, r14
 2ae:	1f 05       	cpc	r17, r15
 2b0:	b9 f7       	brne	.-18     	; 0x2a0 <LCDWriteInt+0x6a>
 2b2:	11 c0       	rjmp	.+34     	; 0x2d6 <LCDWriteInt+0xa0>
 2b4:	05 30       	cpi	r16, 0x05	; 5
 2b6:	11 05       	cpc	r17, r1
 2b8:	1c f0       	brlt	.+6      	; 0x2c0 <LCDWriteInt+0x8a>
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <LCDWriteInt+0xa0>
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	8c 0f       	add	r24, r28
 2c6:	9d 1f       	adc	r25, r29
 2c8:	08 0f       	add	r16, r24
 2ca:	19 1f       	adc	r17, r25
 2cc:	7e 01       	movw	r14, r28
 2ce:	96 e0       	ldi	r25, 0x06	; 6
 2d0:	e9 0e       	add	r14, r25
 2d2:	f1 1c       	adc	r15, r1
 2d4:	e5 cf       	rjmp	.-54     	; 0x2a0 <LCDWriteInt+0x6a>
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	08 95       	ret

000002ee <LCDGotoXY>:
 2ee:	88 32       	cpi	r24, 0x28	; 40
 2f0:	28 f4       	brcc	.+10     	; 0x2fc <LCDGotoXY+0xe>
 2f2:	61 11       	cpse	r22, r1
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	3a cf       	rjmp	.-396    	; 0x170 <LCDByte>
 2fc:	08 95       	ret

000002fe <mTimer>:
	
	return(0);
}

void mTimer(int count)
{
 2fe:	ac 01       	movw	r20, r24
	// Initialize ms counter variable to zero
	int i = 0;
	
	// Set timer 1B to CTC compare
	TCCR1B |= _BV(WGM12);
 300:	e1 e8       	ldi	r30, 0x81	; 129
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	90 81       	ld	r25, Z
 306:	98 60       	ori	r25, 0x08	; 8
 308:	90 83       	st	Z, r25
	
	// Set TOP value for CTC comparison
	OCR1A = 0x03E8;
 30a:	88 ee       	ldi	r24, 0xE8	; 232
 30c:	93 e0       	ldi	r25, 0x03	; 3
 30e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 312:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	// Set COUNT to zero
	TCNT1 = 0x0000;
 316:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 31a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	// Clear interrupt flag and start timer
	TIFR1 |= _BV(OCF1A);
 31e:	b1 9a       	sbi	0x16, 1	; 22
}

void mTimer(int count)
{
	// Initialize ms counter variable to zero
	int i = 0;
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
	TCNT1 = 0x0000;
	
	// Clear interrupt flag and start timer
	TIFR1 |= _BV(OCF1A);
	
	while(i < count)
 324:	05 c0       	rjmp	.+10     	; 0x330 <mTimer+0x32>
	{
		// If flag set, increment counter and clear flag
		if(TIFR1 & 0x02)
 326:	b1 9b       	sbis	0x16, 1	; 22
 328:	fe cf       	rjmp	.-4      	; 0x326 <mTimer+0x28>
		{
			TIFR1 |= _BV(OCF1A);
 32a:	b1 9a       	sbi	0x16, 1	; 22
			i++;
 32c:	2f 5f       	subi	r18, 0xFF	; 255
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
	TCNT1 = 0x0000;
	
	// Clear interrupt flag and start timer
	TIFR1 |= _BV(OCF1A);
	
	while(i < count)
 330:	24 17       	cp	r18, r20
 332:	35 07       	cpc	r19, r21
 334:	1c f4       	brge	.+6      	; 0x33c <mTimer+0x3e>
	{
		// If flag set, increment counter and clear flag
		if(TIFR1 & 0x02)
 336:	b1 9b       	sbis	0x16, 1	; 22
 338:	f6 cf       	rjmp	.-20     	; 0x326 <mTimer+0x28>
 33a:	f7 cf       	rjmp	.-18     	; 0x32a <mTimer+0x2c>
 33c:	08 95       	ret

0000033e <home>:
	return;
}

//This function rotates the stepper clockwise until the homing sensor triggers the INT2 interrupt
void home(){
	while (homed_flag != 1){
 33e:	1c c0       	rjmp	.+56     	; 0x378 <home+0x3a>
		PORTA = stepper[position];
 340:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <position>
 344:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <position+0x1>
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	e4 5d       	subi	r30, 0xD4	; 212
 34e:	fc 4f       	sbci	r31, 0xFC	; 252
 350:	80 81       	ld	r24, Z
 352:	82 b9       	out	0x02, r24	; 2
		mTimer(20);
 354:	84 e1       	ldi	r24, 0x14	; 20
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	d2 df       	rcall	.-92     	; 0x2fe <mTimer>
		position++;
 35a:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <position>
 35e:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <position+0x1>
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <position+0x1>
 368:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <position>
		if(position == 4){
 36c:	04 97       	sbiw	r24, 0x04	; 4
 36e:	21 f4       	brne	.+8      	; 0x378 <home+0x3a>
			position = 0;
 370:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <position+0x1>
 374:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <position>
	return;
}

//This function rotates the stepper clockwise until the homing sensor triggers the INT2 interrupt
void home(){
	while (homed_flag != 1){
 378:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <homed_flag>
 37c:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <homed_flag+0x1>
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f6       	brne	.-68     	; 0x340 <home+0x2>
		position++;
		if(position == 4){
			position = 0;
		}
	}
	LCDWriteStringXY(0,0,"Disk homed Black");	// Can be removed after testing
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	b2 df       	rcall	.-156    	; 0x2ee <LCDGotoXY>
 38a:	8f e3       	ldi	r24, 0x3F	; 63
 38c:	93 e0       	ldi	r25, 0x03	; 3
 38e:	44 df       	rcall	.-376    	; 0x218 <LCDWriteString>
//	LCDWriteStringXY(0,1,"Position: ");
//	LCDWriteIntXY(11,1,position,2);
	mTimer(1000);
 390:	88 ee       	ldi	r24, 0xE8	; 232
 392:	93 e0       	ldi	r25, 0x03	; 3
 394:	b4 cf       	rjmp	.-152    	; 0x2fe <mTimer>
 396:	08 95       	ret

00000398 <move>:
 398:	af 92       	push	r10
}


//This function moves the stepper clockwise(0) or counter clockwise(1) 90 degrees or 180 degrees
void move(int c){
 39a:	bf 92       	push	r11
 39c:	cf 92       	push	r12
 39e:	df 92       	push	r13
 3a0:	ef 92       	push	r14
 3a2:	ff 92       	push	r15
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	7c 01       	movw	r14, r24
	int i = 0;
	int total = c;
	if (disk_direction == 0){
 3ae:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <disk_direction>
 3b2:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <disk_direction+0x1>
 3b6:	89 2b       	or	r24, r25
 3b8:	b1 f1       	breq	.+108    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ba:	3f c0       	rjmp	.+126    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3bc:	08 ec       	ldi	r16, 0xC8	; 200
 3be:	12 e0       	ldi	r17, 0x02	; 2
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	cf 2e       	mov	r12, r31
 3c6:	f2 e0       	ldi	r31, 0x02	; 2
 3c8:	df 2e       	mov	r13, r31
 3ca:	f0 2d       	mov	r31, r0
		while(c > 0){
 3cc:	e7 01       	movw	r28, r14
			PORTA = stepper[position];
 3ce:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <position>
 3d2:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <position+0x1>
 3d6:	ee 0f       	add	r30, r30
 3d8:	ff 1f       	adc	r31, r31
 3da:	e4 5d       	subi	r30, 0xD4	; 212
 3dc:	fc 4f       	sbci	r31, 0xFC	; 252
 3de:	80 81       	ld	r24, Z
 3e0:	82 b9       	out	0x02, r24	; 2
			if(total == 90){
 3e2:	8a e5       	ldi	r24, 0x5A	; 90
 3e4:	e8 16       	cp	r14, r24
 3e6:	f1 04       	cpc	r15, r1
 3e8:	29 f4       	brne	.+10     	; 0x3f4 <move+0x5c>
				mTimer(delay_a[i]);
 3ea:	f8 01       	movw	r30, r16
 3ec:	80 81       	ld	r24, Z
 3ee:	91 81       	ldd	r25, Z+1	; 0x01
 3f0:	86 df       	rcall	.-244    	; 0x2fe <mTimer>
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <move+0x64>
			}
			else{mTimer(delay_b[i]);}
 3f4:	f6 01       	movw	r30, r12
 3f6:	80 81       	ld	r24, Z
 3f8:	91 81       	ldd	r25, Z+1	; 0x01
 3fa:	81 df       	rcall	.-254    	; 0x2fe <mTimer>
			i++;		
			position++;
 3fc:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <position>
 400:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <position+0x1>
 404:	01 96       	adiw	r24, 0x01	; 1
			c--;			
 406:	21 97       	sbiw	r28, 0x01	; 1
			if(position == 4){
 408:	84 30       	cpi	r24, 0x04	; 4
 40a:	91 05       	cpc	r25, r1
 40c:	29 f0       	breq	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			if(total == 90){
				mTimer(delay_a[i]);
			}
			else{mTimer(delay_b[i]);}
			i++;		
			position++;
 40e:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <position+0x1>
 412:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <position>
 416:	04 c0       	rjmp	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			c--;			
			if(position == 4){
				position = 0;
 418:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <position+0x1>
 41c:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <position>
			}
			if(c == 0){
 420:	20 97       	sbiw	r28, 0x00	; 0
 422:	29 f4       	brne	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 424:	54 c0       	rjmp	.+168    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
//This function moves the stepper clockwise(0) or counter clockwise(1) 90 degrees or 180 degrees
void move(int c){
	int i = 0;
	int total = c;
	if (disk_direction == 0){
		while(c > 0){
 426:	1e 14       	cp	r1, r14
 428:	1f 04       	cpc	r1, r15
 42a:	44 f2       	brlt	.-112    	; 0x3bc <move+0x24>
 42c:	50 c0       	rjmp	.+160    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 42e:	0e 5f       	subi	r16, 0xFE	; 254
 430:	1f 4f       	sbci	r17, 0xFF	; 255
 432:	f2 e0       	ldi	r31, 0x02	; 2
 434:	cf 0e       	add	r12, r31
 436:	d1 1c       	adc	r13, r1
 438:	ca cf       	rjmp	.-108    	; 0x3ce <move+0x36>
				mTimer(2000);*/
				break;
			}			
		}
	}
	if (disk_direction == 1){
 43a:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <disk_direction>
 43e:	90 91 e6 03 	lds	r25, 0x03E6	; 0x8003e6 <disk_direction+0x1>
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	09 f0       	breq	.+2      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 446:	43 c0       	rjmp	.+134    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 448:	30 c0       	rjmp	.+96     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
		while (c > 0){
			PORTA = stepper[position];
 44a:	e0 91 e7 03 	lds	r30, 0x03E7	; 0x8003e7 <position>
 44e:	f0 91 e8 03 	lds	r31, 0x03E8	; 0x8003e8 <position+0x1>
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	e4 5d       	subi	r30, 0xD4	; 212
 458:	fc 4f       	sbci	r31, 0xFC	; 252
 45a:	80 81       	ld	r24, Z
 45c:	82 b9       	out	0x02, r24	; 2
			if(total == 90){
 45e:	8a e5       	ldi	r24, 0x5A	; 90
 460:	e8 16       	cp	r14, r24
 462:	f1 04       	cpc	r15, r1
 464:	29 f4       	brne	.+10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				mTimer(delay_a[i]);
 466:	f8 01       	movw	r30, r16
 468:	80 81       	ld	r24, Z
 46a:	91 81       	ldd	r25, Z+1	; 0x01
 46c:	48 df       	rcall	.-368    	; 0x2fe <mTimer>
 46e:	04 c0       	rjmp	.+8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
			}
			else{mTimer(delay_b[i]);}
 470:	f5 01       	movw	r30, r10
 472:	80 81       	ld	r24, Z
 474:	91 81       	ldd	r25, Z+1	; 0x01
 476:	43 df       	rcall	.-378    	; 0x2fe <mTimer>
			i++;
			position--;
 478:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <position>
 47c:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <position+0x1>
 480:	01 97       	sbiw	r24, 0x01	; 1
			c--;
 482:	21 97       	sbiw	r28, 0x01	; 1
			if(position < 0){
 484:	99 23       	and	r25, r25
 486:	2c f0       	brlt	.+10     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			if(total == 90){
				mTimer(delay_a[i]);
			}
			else{mTimer(delay_b[i]);}
			i++;
			position--;
 488:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <position+0x1>
 48c:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <position>
 490:	04 c0       	rjmp	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			c--;
			if(position < 0){
				position = 3;
 492:	d0 92 e8 03 	sts	0x03E8, r13	; 0x8003e8 <position+0x1>
 496:	c0 92 e7 03 	sts	0x03E7, r12	; 0x8003e7 <position>
 49a:	0e 5f       	subi	r16, 0xFE	; 254
 49c:	1f 4f       	sbci	r17, 0xFF	; 255
 49e:	f2 e0       	ldi	r31, 0x02	; 2
 4a0:	af 0e       	add	r10, r31
 4a2:	b1 1c       	adc	r11, r1
				break;
			}			
		}
	}
	if (disk_direction == 1){
		while (c > 0){
 4a4:	20 97       	sbiw	r28, 0x00	; 0
 4a6:	89 f6       	brne	.-94     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 4a8:	12 c0       	rjmp	.+36     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4aa:	1e 14       	cp	r1, r14
 4ac:	1f 04       	cpc	r1, r15
 4ae:	7c f4       	brge	.+30     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4b0:	08 ec       	ldi	r16, 0xC8	; 200
 4b2:	12 e0       	ldi	r17, 0x02	; 2
 4b4:	0f 2e       	mov	r0, r31
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	af 2e       	mov	r10, r31
 4ba:	f2 e0       	ldi	r31, 0x02	; 2
 4bc:	bf 2e       	mov	r11, r31
 4be:	f0 2d       	mov	r31, r0
 4c0:	e7 01       	movw	r28, r14
			else{mTimer(delay_b[i]);}
			i++;
			position--;
			c--;
			if(position < 0){
				position = 3;
 4c2:	0f 2e       	mov	r0, r31
 4c4:	f3 e0       	ldi	r31, 0x03	; 3
 4c6:	cf 2e       	mov	r12, r31
 4c8:	d1 2c       	mov	r13, r1
 4ca:	f0 2d       	mov	r31, r0
 4cc:	be cf       	rjmp	.-132    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				mTimer(2000);*/
				break;
			}
		}
	}
}
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	08 95       	ret

000004e4 <sort>:

// This function moves the sorting bucket to a location based on part in list
void sort(char list_item)
{
	switch(disk_location)
 4e4:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <disk_location>
 4e8:	92 36       	cpi	r25, 0x62	; 98
 4ea:	59 f0       	breq	.+22     	; 0x502 <sort+0x1e>
 4ec:	18 f4       	brcc	.+6      	; 0x4f4 <sort+0x10>
 4ee:	91 36       	cpi	r25, 0x61	; 97
 4f0:	b1 f1       	breq	.+108    	; 0x55e <sort+0x7a>
 4f2:	be c0       	rjmp	.+380    	; 0x670 <sort+0x18c>
 4f4:	93 37       	cpi	r25, 0x73	; 115
 4f6:	09 f4       	brne	.+2      	; 0x4fa <sort+0x16>
 4f8:	8e c0       	rjmp	.+284    	; 0x616 <sort+0x132>
 4fa:	97 37       	cpi	r25, 0x77	; 119
 4fc:	09 f4       	brne	.+2      	; 0x500 <sort+0x1c>
 4fe:	5d c0       	rjmp	.+186    	; 0x5ba <sort+0xd6>
 500:	b7 c0       	rjmp	.+366    	; 0x670 <sort+0x18c>
	{
		case 'b':
		switch(list_item)
 502:	82 36       	cpi	r24, 0x62	; 98
 504:	09 f4       	brne	.+2      	; 0x508 <sort+0x24>
 506:	b7 c0       	rjmp	.+366    	; 0x676 <sort+0x192>
 508:	18 f4       	brcc	.+6      	; 0x510 <sort+0x2c>
 50a:	81 36       	cpi	r24, 0x61	; 97
 50c:	31 f0       	breq	.+12     	; 0x51a <sort+0x36>
 50e:	24 c0       	rjmp	.+72     	; 0x558 <sort+0x74>
 510:	83 37       	cpi	r24, 0x73	; 115
 512:	71 f0       	breq	.+28     	; 0x530 <sort+0x4c>
 514:	87 37       	cpi	r24, 0x77	; 119
 516:	c9 f0       	breq	.+50     	; 0x54a <sort+0x66>
 518:	1f c0       	rjmp	.+62     	; 0x558 <sort+0x74>
		{
			case 'b':
			break;
			
			case 'a':
			disk_direction = 0;
 51a:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <disk_direction+0x1>
 51e:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <disk_direction>
			move(QUARTER_TURN);
 522:	82 e3       	ldi	r24, 0x32	; 50
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	38 df       	rcall	.-400    	; 0x398 <move>
			disk_location = 'a';
 528:	81 e6       	ldi	r24, 0x61	; 97
 52a:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
 52e:	a3 c0       	rjmp	.+326    	; 0x676 <sort+0x192>
			
			case 's':
			disk_direction = 1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <disk_direction+0x1>
 538:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <disk_direction>
			move(QUARTER_TURN);
 53c:	82 e3       	ldi	r24, 0x32	; 50
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	2b df       	rcall	.-426    	; 0x398 <move>
			disk_location = 's';
 542:	83 e7       	ldi	r24, 0x73	; 115
 544:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
 548:	96 c0       	rjmp	.+300    	; 0x676 <sort+0x192>
			
			case 'w':
			move(HALF_TURN);
 54a:	84 e6       	ldi	r24, 0x64	; 100
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	24 df       	rcall	.-440    	; 0x398 <move>
			disk_location = 'w';
 550:	87 e7       	ldi	r24, 0x77	; 119
 552:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
			
			default:
			// exit with error code
			exit(1);
 556:	8f c0       	rjmp	.+286    	; 0x676 <sort+0x192>
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	80 d2       	rcall	.+1280   	; 0xa5e <_exit>
		}
		break;
		
		case 'a':
		switch(list_item)
 55e:	82 36       	cpi	r24, 0x62	; 98
 560:	51 f0       	breq	.+20     	; 0x576 <sort+0x92>
 562:	20 f4       	brcc	.+8      	; 0x56c <sort+0x88>
 564:	81 36       	cpi	r24, 0x61	; 97
 566:	09 f4       	brne	.+2      	; 0x56a <sort+0x86>
 568:	86 c0       	rjmp	.+268    	; 0x676 <sort+0x192>
 56a:	24 c0       	rjmp	.+72     	; 0x5b4 <sort+0xd0>
 56c:	83 37       	cpi	r24, 0x73	; 115
 56e:	81 f0       	breq	.+32     	; 0x590 <sort+0xac>
 570:	87 37       	cpi	r24, 0x77	; 119
 572:	a9 f0       	breq	.+42     	; 0x59e <sort+0xba>
 574:	1f c0       	rjmp	.+62     	; 0x5b4 <sort+0xd0>
		{
			case 'a':
			break;
			
			case 'b':
			disk_direction = 1;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <disk_direction+0x1>
 57e:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <disk_direction>
			move(QUARTER_TURN);
 582:	82 e3       	ldi	r24, 0x32	; 50
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	08 df       	rcall	.-496    	; 0x398 <move>
			disk_location = 'b';
 588:	82 e6       	ldi	r24, 0x62	; 98
 58a:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
			
			case 's':
			move(HALF_TURN);
 58e:	73 c0       	rjmp	.+230    	; 0x676 <sort+0x192>
 590:	84 e6       	ldi	r24, 0x64	; 100
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	01 df       	rcall	.-510    	; 0x398 <move>
			disk_location = 's';
 596:	83 e7       	ldi	r24, 0x73	; 115
 598:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
 59c:	6c c0       	rjmp	.+216    	; 0x676 <sort+0x192>
			
			case 'w':
			disk_direction = 0;
 59e:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <disk_direction+0x1>
 5a2:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <disk_direction>
			move(QUARTER_TURN);
 5a6:	82 e3       	ldi	r24, 0x32	; 50
 5a8:	90 e0       	ldi	r25, 0x00	; 0
			disk_location = 'w';
 5aa:	f6 de       	rcall	.-532    	; 0x398 <move>
 5ac:	87 e7       	ldi	r24, 0x77	; 119
 5ae:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
			
			default:
			// exit with error code
			exit(1);
 5b2:	61 c0       	rjmp	.+194    	; 0x676 <sort+0x192>
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	52 d2       	rcall	.+1188   	; 0xa5e <_exit>
		}
		break;
		
		case 'w':
		switch(list_item)
 5ba:	82 36       	cpi	r24, 0x62	; 98
 5bc:	51 f0       	breq	.+20     	; 0x5d2 <sort+0xee>
 5be:	18 f4       	brcc	.+6      	; 0x5c6 <sort+0xe2>
 5c0:	81 36       	cpi	r24, 0x61	; 97
 5c2:	71 f0       	breq	.+28     	; 0x5e0 <sort+0xfc>
 5c4:	25 c0       	rjmp	.+74     	; 0x610 <sort+0x12c>
 5c6:	83 37       	cpi	r24, 0x73	; 115
 5c8:	c1 f0       	breq	.+48     	; 0x5fa <sort+0x116>
 5ca:	87 37       	cpi	r24, 0x77	; 119
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <sort+0xec>
 5ce:	53 c0       	rjmp	.+166    	; 0x676 <sort+0x192>
		{
			case 'w':
			break;
			
			case 'b':
			move(HALF_TURN);
 5d0:	1f c0       	rjmp	.+62     	; 0x610 <sort+0x12c>
 5d2:	84 e6       	ldi	r24, 0x64	; 100
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	e0 de       	rcall	.-576    	; 0x398 <move>
			disk_location = 'b';
 5d8:	82 e6       	ldi	r24, 0x62	; 98
 5da:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
			
			case 'a':
			disk_direction = 1;
 5de:	4b c0       	rjmp	.+150    	; 0x676 <sort+0x192>
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <disk_direction+0x1>
 5e8:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <disk_direction>
			move(QUARTER_TURN);
 5ec:	82 e3       	ldi	r24, 0x32	; 50
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	d3 de       	rcall	.-602    	; 0x398 <move>
			disk_location = 'a';
 5f2:	81 e6       	ldi	r24, 0x61	; 97
 5f4:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
			
			case 's':
			disk_direction = 0;
 5f8:	3e c0       	rjmp	.+124    	; 0x676 <sort+0x192>
 5fa:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <disk_direction+0x1>
			move(QUARTER_TURN);
 5fe:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <disk_direction>
 602:	82 e3       	ldi	r24, 0x32	; 50
 604:	90 e0       	ldi	r25, 0x00	; 0
			disk_location = 's';
 606:	c8 de       	rcall	.-624    	; 0x398 <move>
 608:	83 e7       	ldi	r24, 0x73	; 115
 60a:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
			
			default:
			// exit with error code
			exit(1);
 60e:	33 c0       	rjmp	.+102    	; 0x676 <sort+0x192>
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	24 d2       	rcall	.+1096   	; 0xa5e <_exit>
		}
		break;
		
		case 's':
		switch(list_item)
 616:	82 36       	cpi	r24, 0x62	; 98
 618:	49 f0       	breq	.+18     	; 0x62c <sort+0x148>
 61a:	18 f4       	brcc	.+6      	; 0x622 <sort+0x13e>
 61c:	81 36       	cpi	r24, 0x61	; 97
 61e:	89 f0       	breq	.+34     	; 0x642 <sort+0x15e>
 620:	24 c0       	rjmp	.+72     	; 0x66a <sort+0x186>
 622:	83 37       	cpi	r24, 0x73	; 115
 624:	41 f1       	breq	.+80     	; 0x676 <sort+0x192>
 626:	87 37       	cpi	r24, 0x77	; 119
 628:	99 f0       	breq	.+38     	; 0x650 <sort+0x16c>
		{
			case 's':
			break;
			
			case 'b':
			disk_direction = 0;
 62a:	1f c0       	rjmp	.+62     	; 0x66a <sort+0x186>
 62c:	10 92 e6 03 	sts	0x03E6, r1	; 0x8003e6 <disk_direction+0x1>
			move(QUARTER_TURN);
 630:	10 92 e5 03 	sts	0x03E5, r1	; 0x8003e5 <disk_direction>
 634:	82 e3       	ldi	r24, 0x32	; 50
 636:	90 e0       	ldi	r25, 0x00	; 0
			disk_location = 'b';
 638:	af de       	rcall	.-674    	; 0x398 <move>
 63a:	82 e6       	ldi	r24, 0x62	; 98
 63c:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
			
			case 'a':
			move(HALF_TURN);
 640:	1a c0       	rjmp	.+52     	; 0x676 <sort+0x192>
 642:	84 e6       	ldi	r24, 0x64	; 100
 644:	90 e0       	ldi	r25, 0x00	; 0
			disk_location = 'a';
 646:	a8 de       	rcall	.-688    	; 0x398 <move>
 648:	81 e6       	ldi	r24, 0x61	; 97
 64a:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			break;
			
			case 'w':
			disk_direction = 1;
 64e:	13 c0       	rjmp	.+38     	; 0x676 <sort+0x192>
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <disk_direction+0x1>
			move(QUARTER_TURN);
 658:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <disk_direction>
 65c:	82 e3       	ldi	r24, 0x32	; 50
			disk_location = 'w';
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	9b de       	rcall	.-714    	; 0x398 <move>
 662:	87 e7       	ldi	r24, 0x77	; 119
			break;
 664:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
			
			default:
			// exit with error code
			exit(1);
 668:	06 c0       	rjmp	.+12     	; 0x676 <sort+0x192>
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
		}
		break;
		
		default:
		// exit with error code
		exit(1);
 66e:	f7 d1       	rcall	.+1006   	; 0xa5e <_exit>
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	f4 d1       	rcall	.+1000   	; 0xa5e <_exit>
	}
	
	items_sorted++;
 676:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <items_sorted>
 67a:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <items_sorted+0x1>
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <items_sorted+0x1>
 684:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <items_sorted>
 688:	08 95       	ret

0000068a <print_results>:
	// dump item into bucket
}

// Function to test sorting of a list
void print_results(){
	if (disk_location == 'b'){
 68a:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <disk_location>
 68e:	82 36       	cpi	r24, 0x62	; 98
 690:	b9 f4       	brne	.+46     	; 0x6c0 <print_results+0x36>
		LCDWriteStringXY(0, 0, "Disk on Black" );
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	2b de       	rcall	.-938    	; 0x2ee <LCDGotoXY>
 698:	80 e5       	ldi	r24, 0x50	; 80
 69a:	93 e0       	ldi	r25, 0x03	; 3
 69c:	bd dd       	rcall	.-1158   	; 0x218 <LCDWriteString>
		LCDWriteStringXY(0, 1, "Items Sorted: ");
 69e:	61 e0       	ldi	r22, 0x01	; 1
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	25 de       	rcall	.-950    	; 0x2ee <LCDGotoXY>
 6a4:	8e e5       	ldi	r24, 0x5E	; 94
 6a6:	93 e0       	ldi	r25, 0x03	; 3
 6a8:	b7 dd       	rcall	.-1170   	; 0x218 <LCDWriteString>
		LCDWriteIntXY(14,1, items_sorted, 2);
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	8e e0       	ldi	r24, 0x0E	; 14
 6ae:	1f de       	rcall	.-962    	; 0x2ee <LCDGotoXY>
 6b0:	62 e0       	ldi	r22, 0x02	; 2
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <items_sorted>
 6b8:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <items_sorted+0x1>
 6bc:	bc cd       	rjmp	.-1160   	; 0x236 <LCDWriteInt>
 6be:	08 95       	ret
 6c0:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <disk_location>
	}
	else if (disk_location == 'w'){
 6c4:	87 37       	cpi	r24, 0x77	; 119
 6c6:	b9 f4       	brne	.+46     	; 0x6f6 <print_results+0x6c>
		LCDWriteStringXY(0, 0, "Disk on White" );
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	10 de       	rcall	.-992    	; 0x2ee <LCDGotoXY>
 6ce:	8d e6       	ldi	r24, 0x6D	; 109
 6d0:	93 e0       	ldi	r25, 0x03	; 3
 6d2:	a2 dd       	rcall	.-1212   	; 0x218 <LCDWriteString>
		LCDWriteStringXY(0, 1, "Items Sorted: ");
 6d4:	61 e0       	ldi	r22, 0x01	; 1
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0a de       	rcall	.-1004   	; 0x2ee <LCDGotoXY>
 6da:	8e e5       	ldi	r24, 0x5E	; 94
 6dc:	93 e0       	ldi	r25, 0x03	; 3
 6de:	9c dd       	rcall	.-1224   	; 0x218 <LCDWriteString>
 6e0:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteIntXY(14,1, items_sorted, 2);
 6e2:	8e e0       	ldi	r24, 0x0E	; 14
 6e4:	04 de       	rcall	.-1016   	; 0x2ee <LCDGotoXY>
 6e6:	62 e0       	ldi	r22, 0x02	; 2
 6e8:	70 e0       	ldi	r23, 0x00	; 0
 6ea:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <items_sorted>
 6ee:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <items_sorted+0x1>
 6f2:	a1 cd       	rjmp	.-1214   	; 0x236 <LCDWriteInt>
 6f4:	08 95       	ret
 6f6:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <disk_location>
	}
	else if (disk_location == 's'){
 6fa:	83 37       	cpi	r24, 0x73	; 115
 6fc:	b9 f4       	brne	.+46     	; 0x72c <print_results+0xa2>
		LCDWriteStringXY(0, 0, "Disk on Steel" );
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	f5 dd       	rcall	.-1046   	; 0x2ee <LCDGotoXY>
 704:	8b e7       	ldi	r24, 0x7B	; 123
 706:	93 e0       	ldi	r25, 0x03	; 3
 708:	87 dd       	rcall	.-1266   	; 0x218 <LCDWriteString>
 70a:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteStringXY(0, 1, "Items Sorted: ");
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	ef dd       	rcall	.-1058   	; 0x2ee <LCDGotoXY>
 710:	8e e5       	ldi	r24, 0x5E	; 94
 712:	93 e0       	ldi	r25, 0x03	; 3
 714:	81 dd       	rcall	.-1278   	; 0x218 <LCDWriteString>
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	8e e0       	ldi	r24, 0x0E	; 14
		LCDWriteIntXY(14,1, items_sorted, 2);
 71a:	e9 dd       	rcall	.-1070   	; 0x2ee <LCDGotoXY>
 71c:	62 e0       	ldi	r22, 0x02	; 2
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <items_sorted>
 724:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <items_sorted+0x1>
 728:	86 cd       	rjmp	.-1268   	; 0x236 <LCDWriteInt>
 72a:	08 95       	ret
 72c:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <disk_location>
	}
	else if (disk_location == 'a'){
 730:	81 36       	cpi	r24, 0x61	; 97
 732:	b1 f4       	brne	.+44     	; 0x760 <print_results+0xd6>
		LCDWriteStringXY(0, 0, "Disk on Aluminum" );
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	da dd       	rcall	.-1100   	; 0x2ee <LCDGotoXY>
 73a:	89 e8       	ldi	r24, 0x89	; 137
 73c:	93 e0       	ldi	r25, 0x03	; 3
 73e:	6c dd       	rcall	.-1320   	; 0x218 <LCDWriteString>
 740:	61 e0       	ldi	r22, 0x01	; 1
		LCDWriteStringXY(0, 1, "Items Sorted: ");
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	d4 dd       	rcall	.-1112   	; 0x2ee <LCDGotoXY>
 746:	8e e5       	ldi	r24, 0x5E	; 94
 748:	93 e0       	ldi	r25, 0x03	; 3
 74a:	66 dd       	rcall	.-1332   	; 0x218 <LCDWriteString>
 74c:	61 e0       	ldi	r22, 0x01	; 1
 74e:	8e e0       	ldi	r24, 0x0E	; 14
 750:	ce dd       	rcall	.-1124   	; 0x2ee <LCDGotoXY>
		LCDWriteIntXY(14,1, items_sorted, 2);
 752:	62 e0       	ldi	r22, 0x02	; 2
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <items_sorted>
 75a:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <items_sorted+0x1>
 75e:	6b cd       	rjmp	.-1322   	; 0x236 <LCDWriteInt>
 760:	08 95       	ret

00000762 <main>:
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
 76a:	2b 97       	sbiw	r28, 0x0b	; 11

// Millisecond timer
void mTimer(int count);

int main(int argc, char* argv[])
{	
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	de bf       	out	0x3e, r29	; 62
 772:	0f be       	out	0x3f, r0	; 63
 774:	cd bf       	out	0x3d, r28	; 61
	// Reduce clock rate from 16MHz to 8MHz
	CLKPR = 0x80;
 776:	e1 e6       	ldi	r30, 0x61	; 97
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	10 e8       	ldi	r17, 0x80	; 128
 77c:	10 83       	st	Z, r17
	CLKPR = 0x01;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	80 83       	st	Z, r24
	
	// Initialize display
	InitLCD(LS_BLINK|LS_ULINE);
 782:	83 e0       	ldi	r24, 0x03	; 3
 784:	1e dd       	rcall	.-1476   	; 0x1c2 <InitLCD>

	// Clear the screen
	LCDClear();
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	f2 dc       	rcall	.-1564   	; 0x170 <LCDByte>
	char qData;
	setup(&head, &tail);
	*/
	
	// Enter uninterruptable command system
	cli();
 78c:	f8 94       	cli
	
	// Set initial system state
	running = 0x00;
 78e:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <running>
		
	// PWM Out
	DDRB = 0x80;
 792:	14 b9       	out	0x04, r17	; 4
	
	// DC Motor
	DDRL = 0xF0;
 794:	80 ef       	ldi	r24, 0xF0	; 240
 796:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
//	PORTL |= 0xF0;
	
	// Stepper Motor
	DDRA = 0xFF;
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	81 b9       	out	0x01, r24	; 1
	
	// LCD Display
	DDRC = 0xFF;
 79e:	87 b9       	out	0x07, r24	; 7
	
	// LED Debug Bank
	DDRK = 0xFF;
 7a0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
	DDRF = 0xC0;
 7a4:	80 ec       	ldi	r24, 0xC0	; 192
 7a6:	80 bb       	out	0x10, r24	; 16
	
	// Set clock prescaler for timer 1B to 1/8
	TCCR1B |= _BV(CS11);
 7a8:	e1 e8       	ldi	r30, 0x81	; 129
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	80 81       	ld	r24, Z
 7ae:	82 60       	ori	r24, 0x02	; 2
 7b0:	80 83       	st	Z, r24
	
	// Set INT3 to falling edge mode (ramp down)
	// Set INT2 to falling edge mode (homing sensor)
	// Set INT1 to falling edge mode (pause resume)
	// Set INT0 to any edge mode (kill switch)
	EIMSK |= _BV(INT0) | _BV(INT1) | _BV(INT2);// | _BV(INT3);
 7b2:	8d b3       	in	r24, 0x1d	; 29
 7b4:	87 60       	ori	r24, 0x07	; 7
 7b6:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0xA6;
 7b8:	86 ea       	ldi	r24, 0xA6	; 166
 7ba:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	
	// Enable ADC
	ADCSRA |= _BV(ADEN);
 7be:	ea e7       	ldi	r30, 0x7A	; 122
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	80 81       	ld	r24, Z
 7c4:	80 68       	ori	r24, 0x80	; 128
 7c6:	80 83       	st	Z, r24
	
	// Enable automatic interrupt firing after each completed conversion
	ADCSRA |= _BV(ADIE);
 7c8:	80 81       	ld	r24, Z
 7ca:	88 60       	ori	r24, 0x08	; 8
 7cc:	80 83       	st	Z, r24
	
	// Enable automated conversions in free running mode
	ADCSRA |= _BV(ADATE);
 7ce:	80 81       	ld	r24, Z
 7d0:	80 62       	ori	r24, 0x20	; 32
 7d2:	80 83       	st	Z, r24
	
	// Set waveform generation mode to Fast PWM
	// with TOP = OCR0A, update OCRA at TOP, set
	// TOV at MAX
	TCCR0A |= _BV(WGM01) | _BV(WGM00);
 7d4:	84 b5       	in	r24, 0x24	; 36
 7d6:	83 60       	ori	r24, 0x03	; 3
 7d8:	84 bd       	out	0x24, r24	; 36
	
	// Set initial duty cycle
	OCR0A = 0x3F;
 7da:	8f e3       	ldi	r24, 0x3F	; 63
 7dc:	87 bd       	out	0x27, r24	; 39
	
	// Clear OC0A on Compare Match, set OC0A at BOTTOM
	TCCR0A |= _BV(COM0A1);
 7de:	84 b5       	in	r24, 0x24	; 36
 7e0:	80 68       	ori	r24, 0x80	; 128
 7e2:	84 bd       	out	0x24, r24	; 36
	
	// Set timer prescaler
	// 256 ticks per in a period
	// 8MHz/256 = 31.25KHz cycle w/ no prescaling
	// Therefore want prescaling of 1/8 to get 3.9KHz
	TCCR0B |= _BV(CS01);
 7e4:	85 b5       	in	r24, 0x25	; 37
 7e6:	82 60       	ori	r24, 0x02	; 2
 7e8:	85 bd       	out	0x25, r24	; 37
	
	// Exit uninterruptable command sequence
	sei();
 7ea:	78 94       	sei
	
	// Initialize ADC, start one conversion at the
	// beginning
	ADCSRA |= _BV(ADSC);
 7ec:	80 81       	ld	r24, Z
 7ee:	80 64       	ori	r24, 0x40	; 64
 7f0:	80 83       	st	Z, r24
	
	// Can be removed after testing
	char list[] = {'a','b','s','w','w','a','s','b','w','s','b'};
 7f2:	8b e0       	ldi	r24, 0x0B	; 11
 7f4:	e4 e3       	ldi	r30, 0x34	; 52
 7f6:	f3 e0       	ldi	r31, 0x03	; 3
 7f8:	de 01       	movw	r26, r28
 7fa:	11 96       	adiw	r26, 0x01	; 1
 7fc:	01 90       	ld	r0, Z+
 7fe:	0d 92       	st	X+, r0
 800:	8a 95       	dec	r24
 802:	e1 f7       	brne	.-8      	; 0x7fc <main+0x9a>
	LCDWriteStringXY(0,0,"Disk is homing");
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	72 dd       	rcall	.-1308   	; 0x2ee <LCDGotoXY>
 80a:	8a e9       	ldi	r24, 0x9A	; 154
 80c:	93 e0       	ldi	r25, 0x03	; 3
	home();
 80e:	04 dd       	rcall	.-1528   	; 0x218 <LCDWriteString>
 810:	96 dd       	rcall	.-1236   	; 0x33e <home>
 812:	7e 01       	movw	r14, r28
 814:	8c e0       	ldi	r24, 0x0C	; 12
 816:	e8 0e       	add	r14, r24
 818:	f1 1c       	adc	r15, r1
 81a:	8e 01       	movw	r16, r28
 81c:	0f 5f       	subi	r16, 0xFF	; 255
		}
		
		*/
		// This for loop will be replaced with iteration through a linked list
		for(int i = 0; i < 11; i++){
			sort(list[i]);
 81e:	1f 4f       	sbci	r17, 0xFF	; 255
 820:	f8 01       	movw	r30, r16
 822:	81 91       	ld	r24, Z+
			LCDClear();
 824:	8f 01       	movw	r16, r30
 826:	5e de       	rcall	.-836    	; 0x4e4 <sort>
 828:	60 e0       	ldi	r22, 0x00	; 0
			print_results();
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	a1 dc       	rcall	.-1726   	; 0x170 <LCDByte>
			mTimer(1000);
 82e:	2d df       	rcall	.-422    	; 0x68a <print_results>
 830:	88 ee       	ldi	r24, 0xE8	; 232
 832:	93 e0       	ldi	r25, 0x03	; 3
 834:	64 dd       	rcall	.-1336   	; 0x2fe <mTimer>
			ADC_result_flag = 0x00;
		}
		
		*/
		// This for loop will be replaced with iteration through a linked list
		for(int i = 0; i < 11; i++){
 836:	0e 15       	cp	r16, r14
 838:	1f 05       	cpc	r17, r15
 83a:	91 f7       	brne	.-28     	; 0x820 <main+0xbe>
			sort(list[i]);
			LCDClear();
			print_results();
			mTimer(1000);
		}
		items_sorted = 0;
 83c:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <items_sorted+0x1>
 840:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <items_sorted>
	}
 844:	ea cf       	rjmp	.-44     	; 0x81a <main+0xb8>

00000846 <pause>:
		LCDWriteIntXY(14,1, items_sorted, 2);
	}
}

void pause(){
	if(pause_flag == 2){
 846:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
 84a:	82 30       	cpi	r24, 0x02	; 2
 84c:	09 f0       	breq	.+2      	; 0x850 <pause+0xa>
 84e:	4b c0       	rjmp	.+150    	; 0x8e6 <pause+0xa0>
		LCDClear();
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	8d dc       	rcall	.-1766   	; 0x170 <LCDByte>
		LCDWriteStringXY(0,0, "S:");
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	49 dd       	rcall	.-1390   	; 0x2ee <LCDGotoXY>
 85c:	89 ea       	ldi	r24, 0xA9	; 169
 85e:	93 e0       	ldi	r25, 0x03	; 3
 860:	db dc       	rcall	.-1610   	; 0x218 <LCDWriteString>
		LCDWriteIntXY(2,0,steel,2);
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	82 e0       	ldi	r24, 0x02	; 2
 866:	43 dd       	rcall	.-1402   	; 0x2ee <LCDGotoXY>
 868:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <steel>
 86c:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <steel+0x1>
 870:	62 e0       	ldi	r22, 0x02	; 2
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	e0 dc       	rcall	.-1600   	; 0x236 <LCDWriteInt>
		LCDWriteStringXY(4,0, ", A:");
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	84 e0       	ldi	r24, 0x04	; 4
 87a:	39 dd       	rcall	.-1422   	; 0x2ee <LCDGotoXY>
 87c:	8c ea       	ldi	r24, 0xAC	; 172
 87e:	93 e0       	ldi	r25, 0x03	; 3
 880:	cb dc       	rcall	.-1642   	; 0x218 <LCDWriteString>
		LCDWriteIntXY(8,0,alum,2);
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	88 e0       	ldi	r24, 0x08	; 8
 886:	33 dd       	rcall	.-1434   	; 0x2ee <LCDGotoXY>
 888:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <alum>
 88c:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <alum+0x1>
 890:	62 e0       	ldi	r22, 0x02	; 2
 892:	70 e0       	ldi	r23, 0x00	; 0
		LCDWriteStringXY(10,0, ", P:");
 894:	d0 dc       	rcall	.-1632   	; 0x236 <LCDWriteInt>
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	8a e0       	ldi	r24, 0x0A	; 10
 89a:	29 dd       	rcall	.-1454   	; 0x2ee <LCDGotoXY>
 89c:	81 eb       	ldi	r24, 0xB1	; 177
 89e:	93 e0       	ldi	r25, 0x03	; 3
 8a0:	bb dc       	rcall	.-1674   	; 0x218 <LCDWriteString>
		LCDWriteIntXY(14,0,plastic,2);
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	8e e0       	ldi	r24, 0x0E	; 14
 8a6:	23 dd       	rcall	.-1466   	; 0x2ee <LCDGotoXY>
 8a8:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <plastic>
 8ac:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <plastic+0x1>
 8b0:	62 e0       	ldi	r22, 0x02	; 2
 8b2:	70 e0       	ldi	r23, 0x00	; 0
		LCDWriteStringXY(0,1, "Items Sorted: ");
 8b4:	c0 dc       	rcall	.-1664   	; 0x236 <LCDWriteInt>
 8b6:	61 e0       	ldi	r22, 0x01	; 1
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	19 dd       	rcall	.-1486   	; 0x2ee <LCDGotoXY>
 8bc:	8e e5       	ldi	r24, 0x5E	; 94
 8be:	93 e0       	ldi	r25, 0x03	; 3
 8c0:	ab dc       	rcall	.-1706   	; 0x218 <LCDWriteString>
		LCDWriteIntXY(13,1,items_sorted,2);
 8c2:	61 e0       	ldi	r22, 0x01	; 1
 8c4:	8d e0       	ldi	r24, 0x0D	; 13
 8c6:	13 dd       	rcall	.-1498   	; 0x2ee <LCDGotoXY>
 8c8:	62 e0       	ldi	r22, 0x02	; 2
 8ca:	70 e0       	ldi	r23, 0x00	; 0
 8cc:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <items_sorted>
 8d0:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <items_sorted+0x1>
 8d4:	b0 dc       	rcall	.-1696   	; 0x236 <LCDWriteInt>
 8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <pause+0x9a>
 8d8:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
		while((PIND & (1<<PIND1)) != (1<<PIND1)){
			if(pause_flag == 0){
 8dc:	88 23       	and	r24, r24
 8de:	49 f0       	breq	.+18     	; 0x8f2 <pause+0xac>
 8e0:	49 9b       	sbis	0x09, 1	; 9
 8e2:	fa cf       	rjmp	.-12     	; 0x8d8 <pause+0x92>
		LCDWriteIntXY(8,0,alum,2);
		LCDWriteStringXY(10,0, ", P:");
		LCDWriteIntXY(14,0,plastic,2);
		LCDWriteStringXY(0,1, "Items Sorted: ");
		LCDWriteIntXY(13,1,items_sorted,2);
		while((PIND & (1<<PIND1)) != (1<<PIND1)){
 8e4:	08 95       	ret
 8e6:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
			if(pause_flag == 0){
				break;
			}
		}
	}
	else if(pause_flag == 4){
 8ea:	84 30       	cpi	r24, 0x04	; 4
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <pause+0xac>
 8ee:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <__data_end>
//		LCDWriteStringXY(0,0,"Program resumed");
//		LCDClear();
//		LCDWriteIntXY(0,1,pause_flag,1);
		pause_flag = 0;
 8f2:	08 95       	ret

000008f4 <__vector_1>:
 8f4:	1f 92       	push	r1
 8f6:	0f 92       	push	r0
	}
}

// Killswitch ISR
ISR(INT0_vect)
{
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	0f 92       	push	r0
 8fc:	11 24       	eor	r1, r1
	// Stop motor and wait for reset
	PORTL |= 0xF0;
 8fe:	eb e0       	ldi	r30, 0x0B	; 11
 900:	f1 e0       	ldi	r31, 0x01	; 1
 902:	80 81       	ld	r24, Z
 904:	80 6f       	ori	r24, 0xF0	; 240
 906:	80 83       	st	Z, r24
	LCDClear();
 908:	60 e0       	ldi	r22, 0x00	; 0
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	31 dc       	rcall	.-1950   	; 0x170 <LCDByte>
	LCDWriteStringXY(0,0,"Kill Switch Hit");
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	ed dc       	rcall	.-1574   	; 0x2ee <LCDGotoXY>
 914:	86 eb       	ldi	r24, 0xB6	; 182
 916:	93 e0       	ldi	r25, 0x03	; 3
 918:	7f dc       	rcall	.-1794   	; 0x218 <LCDWriteString>
 91a:	ff cf       	rjmp	.-2      	; 0x91a <__vector_1+0x26>

0000091c <__vector_2>:
	while(1);
}

// Pause/resume conveyor belt ISR
ISR(INT1_vect)
{
 91c:	1f 92       	push	r1
 91e:	0f 92       	push	r0
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	0f 92       	push	r0
 924:	11 24       	eor	r1, r1
 926:	0b b6       	in	r0, 0x3b	; 59
 928:	0f 92       	push	r0
 92a:	2f 93       	push	r18
 92c:	3f 93       	push	r19
 92e:	4f 93       	push	r20
 930:	5f 93       	push	r21
 932:	6f 93       	push	r22
 934:	7f 93       	push	r23
 936:	8f 93       	push	r24
 938:	9f 93       	push	r25
 93a:	af 93       	push	r26
 93c:	bf 93       	push	r27
 93e:	ef 93       	push	r30
 940:	ff 93       	push	r31
	//mTimer(25);
	while((PIND & (1<<PIND1)) == (1<<PIND1)){
 942:	49 9b       	sbis	0x09, 1	; 9
 944:	05 c0       	rjmp	.+10     	; 0x950 <__vector_2+0x34>
		mTimer(20);
 946:	84 e1       	ldi	r24, 0x14	; 20
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	d9 dc       	rcall	.-1614   	; 0x2fe <mTimer>

// Pause/resume conveyor belt ISR
ISR(INT1_vect)
{
	//mTimer(25);
	while((PIND & (1<<PIND1)) == (1<<PIND1)){
 94c:	49 99       	sbic	0x09, 1	; 9
 94e:	fb cf       	rjmp	.-10     	; 0x946 <__vector_2+0x2a>
		mTimer(20);
	}
	pause_flag++;
 950:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <__data_end>
 954:	8f 5f       	subi	r24, 0xFF	; 255
 956:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <__data_end>
	pause();
 95a:	75 df       	rcall	.-278    	; 0x846 <pause>
	{
		// Resume
		PORTL &= 0x7F;
		running = 0x01;
	}*/
}
 95c:	ff 91       	pop	r31
 95e:	ef 91       	pop	r30
 960:	bf 91       	pop	r27
 962:	af 91       	pop	r26
 964:	9f 91       	pop	r25
 966:	8f 91       	pop	r24
 968:	7f 91       	pop	r23
 96a:	6f 91       	pop	r22
 96c:	5f 91       	pop	r21
 96e:	4f 91       	pop	r20
 970:	3f 91       	pop	r19
 972:	2f 91       	pop	r18
 974:	0f 90       	pop	r0
 976:	0b be       	out	0x3b, r0	; 59
 978:	0f 90       	pop	r0
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	0f 90       	pop	r0
 97e:	1f 90       	pop	r1
 980:	18 95       	reti

00000982 <__vector_3>:

// Stepper homing interrupt
ISR(INT2_vect){
 982:	1f 92       	push	r1
 984:	0f 92       	push	r0
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	0f 92       	push	r0
 98a:	11 24       	eor	r1, r1
 98c:	8f 93       	push	r24
 98e:	9f 93       	push	r25
	disk_location = 'b';
 990:	82 e6       	ldi	r24, 0x62	; 98
 992:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <disk_location>
	homed_flag = 1;
 996:	81 e0       	ldi	r24, 0x01	; 1
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <homed_flag+0x1>
 99e:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <homed_flag>
	EIMSK |= _BV(INT0) | _BV(INT1) | _BV(INT3) ;	// Disables the INT2 interrupt
 9a2:	8d b3       	in	r24, 0x1d	; 29
 9a4:	8b 60       	ori	r24, 0x0B	; 11
 9a6:	8d bb       	out	0x1d, r24	; 29
}
 9a8:	9f 91       	pop	r25
 9aa:	8f 91       	pop	r24
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <__vector_29>:

// ISR for ADC Conversion Completion
ISR(ADC_vect)
{
 9b6:	1f 92       	push	r1
 9b8:	0f 92       	push	r0
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	0f 92       	push	r0
 9be:	11 24       	eor	r1, r1
 9c0:	8f 93       	push	r24
	// Get ADC result
	ADC_result_lsbs = ADCL;
 9c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 9c6:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <ADC_result_lsbs>
	ADC_result_msbs = ADCH & 0x03;
 9ca:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 9ce:	83 70       	andi	r24, 0x03	; 3
 9d0:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <ADC_result_msbs>
	
	// Set flag indicating a result has been written
	ADC_result_flag = 1;
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <ADC_result_flag>
}
 9da:	8f 91       	pop	r24
 9dc:	0f 90       	pop	r0
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	0f 90       	pop	r0
 9e2:	1f 90       	pop	r1
 9e4:	18 95       	reti

000009e6 <__vector_default>:

ISR(BADISR_vect)
{
 9e6:	1f 92       	push	r1
 9e8:	0f 92       	push	r0
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	0f 92       	push	r0
 9ee:	11 24       	eor	r1, r1
	LCDClear();
 9f0:	60 e0       	ldi	r22, 0x00	; 0
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	bd db       	rcall	.-2182   	; 0x170 <LCDByte>
	LCDWriteStringXY(1,0, "Something went");
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	79 dc       	rcall	.-1806   	; 0x2ee <LCDGotoXY>
 9fc:	86 ec       	ldi	r24, 0xC6	; 198
 9fe:	93 e0       	ldi	r25, 0x03	; 3
 a00:	0b dc       	rcall	.-2026   	; 0x218 <LCDWriteString>
	LCDWriteStringXY(6,1, "wrong!");
 a02:	61 e0       	ldi	r22, 0x01	; 1
 a04:	86 e0       	ldi	r24, 0x06	; 6
 a06:	73 dc       	rcall	.-1818   	; 0x2ee <LCDGotoXY>
 a08:	85 ed       	ldi	r24, 0xD5	; 213
 a0a:	93 e0       	ldi	r25, 0x03	; 3
 a0c:	05 dc       	rcall	.-2038   	; 0x218 <LCDWriteString>
 a0e:	ff cf       	rjmp	.-2      	; 0xa0e <__vector_default+0x28>

00000a10 <__divmodhi4>:
 a10:	97 fb       	bst	r25, 7
 a12:	07 2e       	mov	r0, r23
 a14:	16 f4       	brtc	.+4      	; 0xa1a <__divmodhi4+0xa>
 a16:	00 94       	com	r0
 a18:	06 d0       	rcall	.+12     	; 0xa26 <__divmodhi4_neg1>
 a1a:	77 fd       	sbrc	r23, 7
 a1c:	08 d0       	rcall	.+16     	; 0xa2e <__divmodhi4_neg2>
 a1e:	0b d0       	rcall	.+22     	; 0xa36 <__udivmodhi4>
 a20:	07 fc       	sbrc	r0, 7
 a22:	05 d0       	rcall	.+10     	; 0xa2e <__divmodhi4_neg2>
 a24:	3e f4       	brtc	.+14     	; 0xa34 <__divmodhi4_exit>

00000a26 <__divmodhi4_neg1>:
 a26:	90 95       	com	r25
 a28:	81 95       	neg	r24
 a2a:	9f 4f       	sbci	r25, 0xFF	; 255
 a2c:	08 95       	ret

00000a2e <__divmodhi4_neg2>:
 a2e:	70 95       	com	r23
 a30:	61 95       	neg	r22
 a32:	7f 4f       	sbci	r23, 0xFF	; 255

00000a34 <__divmodhi4_exit>:
 a34:	08 95       	ret

00000a36 <__udivmodhi4>:
 a36:	aa 1b       	sub	r26, r26
 a38:	bb 1b       	sub	r27, r27
 a3a:	51 e1       	ldi	r21, 0x11	; 17
 a3c:	07 c0       	rjmp	.+14     	; 0xa4c <__udivmodhi4_ep>

00000a3e <__udivmodhi4_loop>:
 a3e:	aa 1f       	adc	r26, r26
 a40:	bb 1f       	adc	r27, r27
 a42:	a6 17       	cp	r26, r22
 a44:	b7 07       	cpc	r27, r23
 a46:	10 f0       	brcs	.+4      	; 0xa4c <__udivmodhi4_ep>
 a48:	a6 1b       	sub	r26, r22
 a4a:	b7 0b       	sbc	r27, r23

00000a4c <__udivmodhi4_ep>:
 a4c:	88 1f       	adc	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	5a 95       	dec	r21
 a52:	a9 f7       	brne	.-22     	; 0xa3e <__udivmodhi4_loop>
 a54:	80 95       	com	r24
 a56:	90 95       	com	r25
 a58:	bc 01       	movw	r22, r24
 a5a:	cd 01       	movw	r24, r26
 a5c:	08 95       	ret

00000a5e <_exit>:
 a5e:	f8 94       	cli

00000a60 <__stop_program>:
 a60:	ff cf       	rjmp	.-2      	; 0xa60 <__stop_program>
