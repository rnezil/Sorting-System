
ConveyorBelt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800200  000005ac  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800282  00800282  000006c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c89  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0f  00000000  00000000  00002485  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbc  00000000  00000000  00003394  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000749  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec2  00000000  00000000  000048d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00005797  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	13 c2       	rjmp	.+1062   	; 0x42c <__vector_1>
   6:	00 00       	nop
   8:	25 c2       	rjmp	.+1098   	; 0x454 <__vector_2>
   a:	00 00       	nop
   c:	5f c2       	rjmp	.+1214   	; 0x4cc <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	45 c2       	rjmp	.+1162   	; 0x500 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ea       	ldi	r30, 0xAC	; 172
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 38       	cpi	r26, 0x82	; 130
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e8       	ldi	r26, 0x82	; 130
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 38       	cpi	r26, 0x8C	; 140
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ef d0       	rcall	.+478    	; 0x2fe <main>
 120:	43 c2       	rjmp	.+1158   	; 0x5a8 <_exit>

00000122 <__bad_interrupt>:
 122:	06 c2       	rjmp	.+1036   	; 0x530 <__vector_default>

00000124 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	87 b9       	out	0x07, r24	; 7

	//change LCD mode
	SET_RW();		//Read mode
 12a:	45 9a       	sbi	0x08, 5	; 8
	CLEAR_RS();		//Read status
 12c:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCDBusyLoop+0xc>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCDBusyLoop+0xe>
	_delay_us(0.5);		//tAS
	
	do
	{

		SET_E();
 132:	47 9a       	sbi	0x08, 7	; 8
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCDBusyLoop+0x12>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCDBusyLoop+0x14>

		//Wait tDA for data to become available
		_delay_us(0.5);
		
		status=LCD_DATA_PIN;
 138:	86 b1       	in	r24, 0x06	; 6
		status=status<<4;
 13a:	82 95       	swap	r24
 13c:	80 7f       	andi	r24, 0xF0	; 240
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCDBusyLoop+0x1c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCDBusyLoop+0x1e>

		_delay_us(0.5);
		
		//Pull E low
		CLEAR_E();
 142:	47 98       	cbi	0x08, 7	; 8
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x22>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCDBusyLoop+0x28>
		_delay_us(1);	//tEL
		
		SET_E();
 14c:	47 9a       	sbi	0x08, 7	; 8
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCDBusyLoop+0x2c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCDBusyLoop+0x2e>
		_delay_us(0.5);
		
		temp=LCD_DATA_PIN;
 152:	96 b1       	in	r25, 0x06	; 6
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCDBusyLoop+0x32>
 156:	00 c0       	rjmp	.+0      	; 0x158 <LCDBusyLoop+0x34>

		busy=status & 0b10000000;

		_delay_us(0.5);
		
		CLEAR_E();
 158:	47 98       	cbi	0x08, 7	; 8
 15a:	92 e0       	ldi	r25, 0x02	; 2
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCDBusyLoop+0x3e>
		_delay_us(1);	//tEL
		
	}while(busy);
 162:	88 23       	and	r24, r24
 164:	34 f3       	brlt	.-52     	; 0x132 <LCDBusyLoop+0xe>

	CLEAR_RW();		//write mode
 166:	45 98       	cbi	0x08, 5	; 8
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 168:	87 b1       	in	r24, 0x07	; 7
 16a:	8f 60       	ori	r24, 0x0F	; 15
 16c:	87 b9       	out	0x07, r24	; 7
 16e:	08 95       	ret

00000170 <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
 170:	28 2f       	mov	r18, r24
 172:	22 95       	swap	r18
 174:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
 176:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
 178:	61 11       	cpse	r22, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <LCDByte+0x10>
	CLEAR_RS();
 17c:	46 98       	cbi	0x08, 6	; 8
 17e:	01 c0       	rjmp	.+2      	; 0x182 <LCDByte+0x12>
else
	SET_RS();
 180:	46 9a       	sbi	0x08, 6	; 8
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCDByte+0x14>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCDByte+0x16>

_delay_us(0.500);		//tAS


SET_E();
 186:	47 9a       	sbi	0x08, 7	; 8

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 188:	98 b1       	in	r25, 0x08	; 8
 18a:	90 7f       	andi	r25, 0xF0	; 240
 18c:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
 18e:	98 b9       	out	0x08, r25	; 8
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	9a 95       	dec	r25
 194:	f1 f7       	brne	.-4      	; 0x192 <LCDByte+0x22>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCDByte+0x28>
_delay_us(1);			//tEH


//Now data lines are stable pull E low for transmission

CLEAR_E();
 198:	47 98       	cbi	0x08, 7	; 8
 19a:	92 e0       	ldi	r25, 0x02	; 2
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDByte+0x2c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <LCDByte+0x32>

_delay_us(1);

//Send the lower nibble
SET_E();
 1a2:	47 9a       	sbi	0x08, 7	; 8

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1a4:	98 b1       	in	r25, 0x08	; 8
 1a6:	90 7f       	andi	r25, 0xF0	; 240
 1a8:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
 1aa:	88 b9       	out	0x08, r24	; 8
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCDByte+0x3e>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCDByte+0x44>
_delay_us(1);			//tEH
						//Do not wait too long, 1 us is good

//SEND

CLEAR_E();
 1b4:	47 98       	cbi	0x08, 7	; 8
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCDByte+0x48>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCDByte+0x4e>

_delay_us(1);			//tEL

LCDBusyLoop();
 1be:	b2 cf       	rjmp	.-156    	; 0x124 <LCDBusyLoop>
 1c0:	08 95       	ret

000001c2 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1c2:	cf 93       	push	r28
 1c4:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	8f e5       	ldi	r24, 0x5F	; 95
 1c8:	9a ee       	ldi	r25, 0xEA	; 234
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <InitLCD+0x8>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <InitLCD+0xe>
 1d0:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
		
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1d2:	87 b1       	in	r24, 0x07	; 7
 1d4:	8f 60       	ori	r24, 0x0F	; 15
 1d6:	87 b9       	out	0x07, r24	; 7
	LCD_E_DDR|=(1<<LCD_E_POS);
 1d8:	3f 9a       	sbi	0x07, 7	; 7
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1da:	3e 9a       	sbi	0x07, 6	; 7
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1dc:	3d 9a       	sbi	0x07, 5	; 7

	LCD_DATA_PORT&=0XF0;
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	88 b9       	out	0x08, r24	; 8
	CLEAR_E();
 1e4:	47 98       	cbi	0x08, 7	; 8
	CLEAR_RW();
 1e6:	45 98       	cbi	0x08, 5	; 8
	CLEAR_RS();
 1e8:	46 98       	cbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <InitLCD+0x2a>
 1ec:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS
	
	SET_E();
 1ee:	47 9a       	sbi	0x08, 7	; 8
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1f0:	41 9a       	sbi	0x08, 1	; 8
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	9a 95       	dec	r25
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <InitLCD+0x32>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <InitLCD+0x38>
	_delay_us(1);
	
	CLEAR_E();
 1fa:	47 98       	cbi	0x08, 7	; 8
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <InitLCD+0x3c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <InitLCD+0x42>
	_delay_us(1);
		
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 204:	8f df       	rcall	.-226    	; 0x124 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	8c 2f       	mov	r24, r28
 20a:	8c 60       	ori	r24, 0x0C	; 12
 20c:	b1 df       	rcall	.-158    	; 0x170 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	ae df       	rcall	.-164    	; 0x170 <LCDByte>
}
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 21e:	88 81       	ld	r24, Y
 220:	88 23       	and	r24, r24
 222:	31 f0       	breq	.+12     	; 0x230 <LCDWriteString+0x18>
 224:	21 96       	adiw	r28, 0x01	; 1
 {
	LCDData(*msg);
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	a3 df       	rcall	.-186    	; 0x170 <LCDByte>
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 22a:	89 91       	ld	r24, Y+
 22c:	81 11       	cpse	r24, r1
 22e:	fb cf       	rjmp	.-10     	; 0x226 <LCDWriteString+0xe>
 {
	LCDData(*msg);
	msg++;
 }
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 236:	ef 92       	push	r14
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	00 d0       	rcall	.+0      	; 0x244 <LCDWriteInt+0xe>
 244:	1f 92       	push	r1
 246:	1f 92       	push	r1
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 24e:	fe 01       	movw	r30, r28
 250:	31 96       	adiw	r30, 0x01	; 1
 252:	25 e0       	ldi	r18, 0x05	; 5
 254:	df 01       	movw	r26, r30
 256:	1d 92       	st	X+, r1
 258:	2a 95       	dec	r18
 25a:	e9 f7       	brne	.-6      	; 0x256 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 25c:	00 97       	sbiw	r24, 0x00	; 0
 25e:	51 f0       	breq	.+20     	; 0x274 <LCDWriteInt+0x3e>
 260:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 262:	2a e0       	ldi	r18, 0x0A	; 10
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	78 d1       	rcall	.+752    	; 0x55a <__divmodhi4>
 26a:	82 93       	st	-Z, r24
	val=val/10;
 26c:	86 2f       	mov	r24, r22
 26e:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	c9 f7       	brne	.-14     	; 0x266 <LCDWriteInt+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 274:	bf ef       	ldi	r27, 0xFF	; 255
 276:	eb 16       	cp	r14, r27
 278:	fb 06       	cpc	r15, r27
 27a:	69 f4       	brne	.+26     	; 0x296 <LCDWriteInt+0x60>
		while(str[j]==0) j++;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	81 11       	cpse	r24, r1
 280:	1d c0       	rjmp	.+58     	; 0x2bc <LCDWriteInt+0x86>
 282:	fe 01       	movw	r30, r28
 284:	32 96       	adiw	r30, 0x02	; 2
 286:	00 e0       	ldi	r16, 0x00	; 0
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	0f 5f       	subi	r16, 0xFF	; 255
 28c:	1f 4f       	sbci	r17, 0xFF	; 255
 28e:	81 91       	ld	r24, Z+
 290:	88 23       	and	r24, r24
 292:	d9 f3       	breq	.-10     	; 0x28a <LCDWriteInt+0x54>
 294:	0f c0       	rjmp	.+30     	; 0x2b4 <LCDWriteInt+0x7e>
	else
		j=5-field_length;
 296:	05 e0       	ldi	r16, 0x05	; 5
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	0e 19       	sub	r16, r14
 29c:	1f 09       	sbc	r17, r15
 29e:	0a c0       	rjmp	.+20     	; 0x2b4 <LCDWriteInt+0x7e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2a0:	f8 01       	movw	r30, r16
 2a2:	81 91       	ld	r24, Z+
 2a4:	8f 01       	movw	r16, r30
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	80 5d       	subi	r24, 0xD0	; 208
 2aa:	62 df       	rcall	.-316    	; 0x170 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2ac:	0e 15       	cp	r16, r14
 2ae:	1f 05       	cpc	r17, r15
 2b0:	b9 f7       	brne	.-18     	; 0x2a0 <LCDWriteInt+0x6a>
 2b2:	11 c0       	rjmp	.+34     	; 0x2d6 <LCDWriteInt+0xa0>
 2b4:	05 30       	cpi	r16, 0x05	; 5
 2b6:	11 05       	cpc	r17, r1
 2b8:	1c f0       	brlt	.+6      	; 0x2c0 <LCDWriteInt+0x8a>
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <LCDWriteInt+0xa0>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	8c 0f       	add	r24, r28
 2c6:	9d 1f       	adc	r25, r29
 2c8:	08 0f       	add	r16, r24
 2ca:	19 1f       	adc	r17, r25
 2cc:	7e 01       	movw	r14, r28
 2ce:	96 e0       	ldi	r25, 0x06	; 6
 2d0:	e9 0e       	add	r14, r25
 2d2:	f1 1c       	adc	r15, r1
 2d4:	e5 cf       	rjmp	.-54     	; 0x2a0 <LCDWriteInt+0x6a>
	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
	}
}
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	08 95       	ret

000002ee <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 2ee:	88 32       	cpi	r24, 0x28	; 40
 2f0:	28 f4       	brcc	.+10     	; 0x2fc <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 2f2:	61 11       	cpse	r22, r1
 2f4:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	3a cf       	rjmp	.-396    	; 0x170 <LCDByte>
 2fc:	08 95       	ret

000002fe <main>:
		LCDWriteIntXY(14,1, items_sorted, 2);
	}
	else if (disk_location == 'a'){
		LCDWriteStringXY(0, 0, "Disk on Aluminum" );
		LCDWriteStringXY(0, 1, "Items Sorted: ");
		LCDWriteIntXY(14,1, items_sorted, 2);
 2fe:	e1 e6       	ldi	r30, 0x61	; 97
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	c0 e8       	ldi	r28, 0x80	; 128
 304:	c0 83       	st	Z, r28
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 83       	st	Z, r24
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	5a df       	rcall	.-332    	; 0x1c2 <InitLCD>
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	2e df       	rcall	.-420    	; 0x170 <LCDByte>
 314:	f8 94       	cli
 316:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <running>
 31a:	c4 b9       	out	0x04, r28	; 4
 31c:	80 ef       	ldi	r24, 0xF0	; 240
 31e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
 322:	eb e0       	ldi	r30, 0x0B	; 11
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	80 81       	ld	r24, Z
 328:	80 6f       	ori	r24, 0xF0	; 240
 32a:	80 83       	st	Z, r24
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	81 b9       	out	0x01, r24	; 1
 330:	87 b9       	out	0x07, r24	; 7
 332:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 336:	80 ec       	ldi	r24, 0xC0	; 192
 338:	80 bb       	out	0x10, r24	; 16
 33a:	e1 e8       	ldi	r30, 0x81	; 129
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	82 60       	ori	r24, 0x02	; 2
 342:	80 83       	st	Z, r24
 344:	8d b3       	in	r24, 0x1d	; 29
 346:	8f 60       	ori	r24, 0x0F	; 15
 348:	8d bb       	out	0x1d, r24	; 29
 34a:	86 ea       	ldi	r24, 0xA6	; 166
 34c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
 350:	ea e7       	ldi	r30, 0x7A	; 122
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 68       	ori	r24, 0x80	; 128
 358:	80 83       	st	Z, r24
 35a:	80 81       	ld	r24, Z
 35c:	88 60       	ori	r24, 0x08	; 8
 35e:	80 83       	st	Z, r24
 360:	80 81       	ld	r24, Z
 362:	80 62       	ori	r24, 0x20	; 32
 364:	80 83       	st	Z, r24
 366:	84 b5       	in	r24, 0x24	; 36
 368:	83 60       	ori	r24, 0x03	; 3
 36a:	84 bd       	out	0x24, r24	; 36
 36c:	8f e3       	ldi	r24, 0x3F	; 63
 36e:	87 bd       	out	0x27, r24	; 39
 370:	84 b5       	in	r24, 0x24	; 36
 372:	80 68       	ori	r24, 0x80	; 128
 374:	84 bd       	out	0x24, r24	; 36
 376:	85 b5       	in	r24, 0x25	; 37
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	85 bd       	out	0x25, r24	; 37
 37c:	78 94       	sei
 37e:	80 81       	ld	r24, Z
 380:	80 64       	ori	r24, 0x40	; 64
 382:	80 83       	st	Z, r24
 384:	e8 e0       	ldi	r30, 0x08	; 8
 386:	f1 e0       	ldi	r31, 0x01	; 1
 388:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <ADC_result_flag>
 38c:	88 23       	and	r24, r24
 38e:	b1 f0       	breq	.+44     	; 0x3bc <main+0xbe>
 390:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <ADC_result_msbs>
 394:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <ADC_result_lsbs>
 398:	30 e4       	ldi	r19, 0x40	; 64
 39a:	93 9f       	mul	r25, r19
 39c:	c0 01       	movw	r24, r0
 39e:	11 24       	eor	r1, r1
 3a0:	92 2f       	mov	r25, r18
 3a2:	96 95       	lsr	r25
 3a4:	96 95       	lsr	r25
 3a6:	89 2b       	or	r24, r25
 3a8:	80 83       	st	Z, r24
 3aa:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <ADC_result_lsbs>
 3ae:	82 95       	swap	r24
 3b0:	88 0f       	add	r24, r24
 3b2:	88 0f       	add	r24, r24
 3b4:	80 7c       	andi	r24, 0xC0	; 192
 3b6:	81 bb       	out	0x11, r24	; 17
 3b8:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <ADC_result_flag>
 3bc:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <items_sorted+0x1>
 3c0:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <items_sorted>
 3c4:	e1 cf       	rjmp	.-62     	; 0x388 <main+0x8a>

000003c6 <mTimer>:
 3c6:	ac 01       	movw	r20, r24
 3c8:	e1 e8       	ldi	r30, 0x81	; 129
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	90 81       	ld	r25, Z
 3ce:	98 60       	ori	r25, 0x08	; 8
 3d0:	90 83       	st	Z, r25
 3d2:	88 ee       	ldi	r24, 0xE8	; 232
 3d4:	93 e0       	ldi	r25, 0x03	; 3
 3d6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3da:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 3de:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 3e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 3e6:	b1 9a       	sbi	0x16, 1	; 22
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <mTimer+0x32>
 3ee:	b1 9b       	sbis	0x16, 1	; 22
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <mTimer+0x28>
 3f2:	b1 9a       	sbi	0x16, 1	; 22
 3f4:	2f 5f       	subi	r18, 0xFF	; 255
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	24 17       	cp	r18, r20
 3fa:	35 07       	cpc	r19, r21
 3fc:	1c f4       	brge	.+6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fe:	b1 9b       	sbis	0x16, 1	; 22
 400:	f6 cf       	rjmp	.-20     	; 0x3ee <mTimer+0x28>
 402:	f7 cf       	rjmp	.-18     	; 0x3f2 <mTimer+0x2c>
 404:	08 95       	ret

00000406 <pause>:
	}
}

void pause(){
	if(pause_flag == 2){
 406:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	41 f4       	brne	.+16     	; 0x41e <pause+0x18>
 40e:	04 c0       	rjmp	.+8      	; 0x418 <pause+0x12>
		LCDWriteStringXY(10,0, ", P:");
		LCDWriteIntXY(14,0,plastic,2);
		LCDWriteStringXY(0,1, "Items Sorted: ");
		LCDWriteIntXY(13,1,items_sorted,2);*/
		while((PIND & (1<<PIND1)) != (1<<PIND1)){
			if(pause_flag == 0){
 410:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
 414:	88 23       	and	r24, r24
 416:	49 f0       	breq	.+18     	; 0x42a <pause+0x24>
		LCDWriteIntXY(8,0,alum,2);
		LCDWriteStringXY(10,0, ", P:");
		LCDWriteIntXY(14,0,plastic,2);
		LCDWriteStringXY(0,1, "Items Sorted: ");
		LCDWriteIntXY(13,1,items_sorted,2);*/
		while((PIND & (1<<PIND1)) != (1<<PIND1)){
 418:	49 9b       	sbis	0x09, 1	; 9
 41a:	fa cf       	rjmp	.-12     	; 0x410 <pause+0xa>
 41c:	08 95       	ret
			if(pause_flag == 0){
				break;
			}
		}
	}
	else if(pause_flag == 4){
 41e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
 422:	84 30       	cpi	r24, 0x04	; 4
 424:	11 f4       	brne	.+4      	; 0x42a <pause+0x24>
//		LCDWriteStringXY(0,0,"Program resumed");
//		LCDClear();
//		LCDWriteIntXY(0,1,pause_flag,1);
		pause_flag = 0;
 426:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
 42a:	08 95       	ret

0000042c <__vector_1>:
	}
}

// Killswitch ISR
ISR(INT0_vect)
{
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
	// Stop motor and wait for reset
	PORTL |= 0xF0;
 436:	eb e0       	ldi	r30, 0x0B	; 11
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	80 81       	ld	r24, Z
 43c:	80 6f       	ori	r24, 0xF0	; 240
 43e:	80 83       	st	Z, r24
	LCDClear();
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	95 de       	rcall	.-726    	; 0x170 <LCDByte>
	LCDWriteStringXY(0,0,"Kill Switch Hit");
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	51 df       	rcall	.-350    	; 0x2ee <LCDGotoXY>
 44c:	8b e5       	ldi	r24, 0x5B	; 91
 44e:	92 e0       	ldi	r25, 0x02	; 2
 450:	e3 de       	rcall	.-570    	; 0x218 <LCDWriteString>
 452:	ff cf       	rjmp	.-2      	; 0x452 <__vector_1+0x26>

00000454 <__vector_2>:
	while(1);
}

// Pause/resume conveyor belt ISR
ISR(INT1_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	0b b6       	in	r0, 0x3b	; 59
 460:	0f 92       	push	r0
 462:	2f 93       	push	r18
 464:	3f 93       	push	r19
 466:	4f 93       	push	r20
 468:	5f 93       	push	r21
 46a:	6f 93       	push	r22
 46c:	7f 93       	push	r23
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
	//mTimer(25);
	while((PIND & (1<<PIND1)) == (1<<PIND1)){
 47a:	49 9b       	sbis	0x09, 1	; 9
 47c:	05 c0       	rjmp	.+10     	; 0x488 <__vector_2+0x34>
		mTimer(20);
 47e:	84 e1       	ldi	r24, 0x14	; 20
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	a1 df       	rcall	.-190    	; 0x3c6 <mTimer>

// Pause/resume conveyor belt ISR
ISR(INT1_vect)
{
	//mTimer(25);
	while((PIND & (1<<PIND1)) == (1<<PIND1)){
 484:	49 99       	sbic	0x09, 1	; 9
 486:	fb cf       	rjmp	.-10     	; 0x47e <__vector_2+0x2a>
		mTimer(20);
	}
	pause_flag++;
 488:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
 48c:	8f 5f       	subi	r24, 0xFF	; 255
 48e:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
	pause();
 492:	b9 df       	rcall	.-142    	; 0x406 <pause>
	LCDWriteIntXY(0,0,pause_flag,2);
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	2a df       	rcall	.-428    	; 0x2ee <LCDGotoXY>
 49a:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
 49e:	62 e0       	ldi	r22, 0x02	; 2
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	c8 de       	rcall	.-624    	; 0x236 <LCDWriteInt>
	{
		// Resume
		PORTL &= 0x7F;
		running = 0x01;
	}*/
}
 4a6:	ff 91       	pop	r31
 4a8:	ef 91       	pop	r30
 4aa:	bf 91       	pop	r27
 4ac:	af 91       	pop	r26
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	7f 91       	pop	r23
 4b4:	6f 91       	pop	r22
 4b6:	5f 91       	pop	r21
 4b8:	4f 91       	pop	r20
 4ba:	3f 91       	pop	r19
 4bc:	2f 91       	pop	r18
 4be:	0f 90       	pop	r0
 4c0:	0b be       	out	0x3b, r0	; 59
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <__vector_3>:

// Stepper homing interrupt
ISR(INT2_vect){
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	8f 93       	push	r24
 4d8:	9f 93       	push	r25
	disk_location = 'b';
 4da:	82 e6       	ldi	r24, 0x62	; 98
 4dc:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <disk_location>
	homed_flag = 1;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <homed_flag+0x1>
 4e8:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <homed_flag>
	EIMSK |= _BV(INT0) | _BV(INT1) | _BV(INT3) ;	// Disables the INT2 interrupt
 4ec:	8d b3       	in	r24, 0x1d	; 29
 4ee:	8b 60       	ori	r24, 0x0B	; 11
 4f0:	8d bb       	out	0x1d, r24	; 29
}
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	0f 90       	pop	r0
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	0f 90       	pop	r0
 4fc:	1f 90       	pop	r1
 4fe:	18 95       	reti

00000500 <__vector_29>:

// ISR for ADC Conversion Completion
ISR(ADC_vect)
{
 500:	1f 92       	push	r1
 502:	0f 92       	push	r0
 504:	0f b6       	in	r0, 0x3f	; 63
 506:	0f 92       	push	r0
 508:	11 24       	eor	r1, r1
 50a:	8f 93       	push	r24
	// Get ADC result
	ADC_result_lsbs = ADCL;
 50c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 510:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <ADC_result_lsbs>
	ADC_result_msbs = ADCH & 0x03;
 514:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 518:	83 70       	andi	r24, 0x03	; 3
 51a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <ADC_result_msbs>
	
	// Set flag indicating a result has been written
	ADC_result_flag = 1;
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <ADC_result_flag>
}
 524:	8f 91       	pop	r24
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_default>:

ISR(BADISR_vect)
{
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
	LCDClear();
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	18 de       	rcall	.-976    	; 0x170 <LCDByte>
	LCDWriteStringXY(1,0, "Something went");
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	d4 de       	rcall	.-600    	; 0x2ee <LCDGotoXY>
 546:	8b e6       	ldi	r24, 0x6B	; 107
 548:	92 e0       	ldi	r25, 0x02	; 2
 54a:	66 de       	rcall	.-820    	; 0x218 <LCDWriteString>
	LCDWriteStringXY(6,1, "wrong!");
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	86 e0       	ldi	r24, 0x06	; 6
 550:	ce de       	rcall	.-612    	; 0x2ee <LCDGotoXY>
 552:	8a e7       	ldi	r24, 0x7A	; 122
 554:	92 e0       	ldi	r25, 0x02	; 2
 556:	60 de       	rcall	.-832    	; 0x218 <LCDWriteString>
 558:	ff cf       	rjmp	.-2      	; 0x558 <__vector_default+0x28>

0000055a <__divmodhi4>:
 55a:	97 fb       	bst	r25, 7
 55c:	07 2e       	mov	r0, r23
 55e:	16 f4       	brtc	.+4      	; 0x564 <__divmodhi4+0xa>
 560:	00 94       	com	r0
 562:	06 d0       	rcall	.+12     	; 0x570 <__divmodhi4_neg1>
 564:	77 fd       	sbrc	r23, 7
 566:	08 d0       	rcall	.+16     	; 0x578 <__divmodhi4_neg2>
 568:	0b d0       	rcall	.+22     	; 0x580 <__udivmodhi4>
 56a:	07 fc       	sbrc	r0, 7
 56c:	05 d0       	rcall	.+10     	; 0x578 <__divmodhi4_neg2>
 56e:	3e f4       	brtc	.+14     	; 0x57e <__divmodhi4_exit>

00000570 <__divmodhi4_neg1>:
 570:	90 95       	com	r25
 572:	81 95       	neg	r24
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	08 95       	ret

00000578 <__divmodhi4_neg2>:
 578:	70 95       	com	r23
 57a:	61 95       	neg	r22
 57c:	7f 4f       	sbci	r23, 0xFF	; 255

0000057e <__divmodhi4_exit>:
 57e:	08 95       	ret

00000580 <__udivmodhi4>:
 580:	aa 1b       	sub	r26, r26
 582:	bb 1b       	sub	r27, r27
 584:	51 e1       	ldi	r21, 0x11	; 17
 586:	07 c0       	rjmp	.+14     	; 0x596 <__udivmodhi4_ep>

00000588 <__udivmodhi4_loop>:
 588:	aa 1f       	adc	r26, r26
 58a:	bb 1f       	adc	r27, r27
 58c:	a6 17       	cp	r26, r22
 58e:	b7 07       	cpc	r27, r23
 590:	10 f0       	brcs	.+4      	; 0x596 <__udivmodhi4_ep>
 592:	a6 1b       	sub	r26, r22
 594:	b7 0b       	sbc	r27, r23

00000596 <__udivmodhi4_ep>:
 596:	88 1f       	adc	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	5a 95       	dec	r21
 59c:	a9 f7       	brne	.-22     	; 0x588 <__udivmodhi4_loop>
 59e:	80 95       	com	r24
 5a0:	90 95       	com	r25
 5a2:	bc 01       	movw	r22, r24
 5a4:	cd 01       	movw	r24, r26
 5a6:	08 95       	ret

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
